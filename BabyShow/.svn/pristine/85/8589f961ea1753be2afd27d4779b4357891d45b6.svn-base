package com.yyqq.code.group;

import java.io.File;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import android.widget.Toast;

import com.ab.http.AbHttpUtil;
import com.ab.http.AbRequestParams;
import com.ab.http.AbStringHttpResponseListener;
import com.yyqq.babyshow.R;
import com.yyqq.commen.utils.Config;
import com.yyqq.commen.utils.VideoComperssUtils;
import com.yyqq.framework.activity.BaseActivity;
import com.yyqq.framework.application.MyApplication;
import com.yyqq.framework.application.ServerMutualConfig;

/**
 * 
 * 微社区头部信息管理
 * 
 * @author lyl
 * 
 * */
public class GroupManagerHeadActivity extends BaseActivity {
	
	private final String IMAGE_TYPE = "image/*";
	private final int IMAGE_CODE = 0;
	private static final int TAKE_PICTURE = 0x000000;
	
	private ImageView group_edit_head_img;
	private TextView group_edit_head_name;
	private TextView group_edit_head_des;
	private TextView group_edit_head_title;
	private RelativeLayout group_edit_img;
	private RelativeLayout group_edit_name;
	private RelativeLayout group_edit_des;
	private RelativeLayout group_edit_title;
	private ImageView showshow_cancel;
	private ImageView edit_text_red;
	private ImageView edit_text_white;
	private ImageView edit_text_blue;
	private ImageView edit_text_black;
	private ImageView edit_text_yellow;
	
	private AbHttpUtil ab;
	private Uri imageUri;
	private String group_id = "";
	private String color_index = "";

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_group_edit_head);
	}

	@Override
	protected void initView() {
		group_edit_head_img = (ImageView) findViewById(R.id.group_edit_head_img);
		group_edit_head_name = (TextView) findViewById(R.id.group_edit_head_name);
		group_edit_head_des = (TextView) findViewById(R.id.group_edit_head_des);
		group_edit_img = (RelativeLayout) findViewById(R.id.group_edit_img);
		group_edit_name = (RelativeLayout) findViewById(R.id.group_edit_name);
		group_edit_des = (RelativeLayout) findViewById(R.id.group_edit_des);
		showshow_cancel = (ImageView) findViewById(R.id.showshow_cancel);
		group_edit_head_title = (TextView) findViewById(R.id.group_edit_head_title);
		group_edit_title = (RelativeLayout) findViewById(R.id.group_edit_title);
		edit_text_red = (ImageView) findViewById(R.id.edit_text_red);
		edit_text_white = (ImageView) findViewById(R.id.edit_text_white);
		edit_text_blue = (ImageView) findViewById(R.id.edit_text_blue);
		edit_text_black = (ImageView) findViewById(R.id.edit_text_black);
		edit_text_yellow = (ImageView) findViewById(R.id.edit_text_yellow);
	}

	@Override
	protected void initData() {
		ab = AbHttpUtil.getInstance(this);
		group_id = getIntent().getStringExtra(GroupMainActivity.GROUP_ID_KEY);
		initGroupHeanInfo();
	}

	@Override
	protected void setListener() {
		
		edit_text_red.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				color_index = "1";
				edit_text_red.setBackground(getResources().getDrawable(R.drawable.red_down));
				edit_text_white.setBackground(getResources().getDrawable(R.drawable.white_up));
				edit_text_blue.setBackground(getResources().getDrawable(R.drawable.blue_up));
				edit_text_black.setBackground(getResources().getDrawable(R.drawable.black_up));
				edit_text_yellow.setBackground(getResources().getDrawable(R.drawable.yellow_up));
				updateHeadInfo(4, "");
			}
		});
		
		edit_text_yellow.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				color_index = "2";
				edit_text_red.setBackground(getResources().getDrawable(R.drawable.red_up));
				edit_text_white.setBackground(getResources().getDrawable(R.drawable.white_up));
				edit_text_blue.setBackground(getResources().getDrawable(R.drawable.blue_up));
				edit_text_black.setBackground(getResources().getDrawable(R.drawable.black_up));
				edit_text_yellow.setBackground(getResources().getDrawable(R.drawable.yellow_down));
				updateHeadInfo(4, "");
			}
		});

		edit_text_white.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				color_index = "3";
				edit_text_red.setBackground(getResources().getDrawable(R.drawable.red_up));
				edit_text_white.setBackground(getResources().getDrawable(R.drawable.white_down));
				edit_text_blue.setBackground(getResources().getDrawable(R.drawable.blue_up));
				edit_text_black.setBackground(getResources().getDrawable(R.drawable.black_up));
				edit_text_yellow.setBackground(getResources().getDrawable(R.drawable.yellow_up));
				updateHeadInfo(4, "");
			}
		});
		
		edit_text_black.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				color_index = "4";
				edit_text_red.setBackground(getResources().getDrawable(R.drawable.red_up));
				edit_text_white.setBackground(getResources().getDrawable(R.drawable.white_up));
				edit_text_blue.setBackground(getResources().getDrawable(R.drawable.blue_up));
				edit_text_black.setBackground(getResources().getDrawable(R.drawable.black_down));
				edit_text_yellow.setBackground(getResources().getDrawable(R.drawable.yellow_up));
				updateHeadInfo(4, "");
			}
		});

		edit_text_blue.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				color_index = "5";
				edit_text_red.setBackground(getResources().getDrawable(R.drawable.red_up));
				edit_text_white.setBackground(getResources().getDrawable(R.drawable.white_up));
				edit_text_blue.setBackground(getResources().getDrawable(R.drawable.blue_down));
				edit_text_black.setBackground(getResources().getDrawable(R.drawable.black_up));
				edit_text_yellow.setBackground(getResources().getDrawable(R.drawable.yellow_up));
				updateHeadInfo(4, "");
			}
		});

		showshow_cancel.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				GroupManagerHeadActivity.this.finish();
			}
		});
		
		group_edit_img.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				AlertDialog.Builder builder = new Builder(GroupManagerHeadActivity.this);
				LayoutInflater inflater = (LayoutInflater) GroupManagerHeadActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				View convertView = inflater.inflate(R.layout.image_dialog, null);
				builder.setTitle("选择");
				builder.setView(convertView);
				TextView image = (TextView) convertView.findViewById(R.id.image);
				TextView camera = (TextView) convertView.findViewById(R.id.camera);
				image.setOnClickListener(selectImageClick);
				camera.setOnClickListener(selectCameraClick);
				dialog = builder.create();
				dialog.show();
			}
		});
		
		group_edit_name.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				updateName();
			}
		});

		group_edit_des.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				updateDes();
			}
		});
		
		group_edit_title.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				updateHint();
			}
		});
	}
	
	Dialog dialog;
	public OnClickListener selectImageClick = new OnClickListener() {
		@Override
		public void onClick(View v) {
			if (dialog != null && dialog.isShowing()) {
				Intent getAlbum = new Intent(Intent.ACTION_GET_CONTENT);
				getAlbum.setType(IMAGE_TYPE);
				startActivityForResult(getAlbum, IMAGE_CODE);
				dialog.dismiss();
			}
		}
	};
	public OnClickListener selectCameraClick = new OnClickListener() {
		@Override
		public void onClick(View v) {
			if (dialog != null && dialog.isShowing()) {
				Intent i = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
				imageUri = Uri.parse("file:///sdcard/yyqq/babyshow/image/temp_image_1.jpg");
				i.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, imageUri);
				startActivityForResult(i, TAKE_PICTURE);
				dialog.dismiss();
			}
		}
	};
	
	/**
	 * 获取头部信息
	 * */
	private void initGroupHeanInfo(){
		AbRequestParams params = new AbRequestParams();
		params.put("login_user_id", Config.getUser(this).uid);
		params.put("group_id", group_id);
		ab.get(ServerMutualConfig.groupHeadInfo + "&" + params.toString(), new AbStringHttpResponseListener() {
			
					@Override
					public void onSuccess(int statusCode, String content) {
						super.onSuccess(statusCode, content);
						if (!content.isEmpty()) {
							try {
								JSONObject json = new JSONObject(content);
								
								MyApplication.getInstance().display(json.getJSONObject("data").getString("cover"), group_edit_head_img, R.drawable.def_image);
								group_edit_head_name.setText(json.getJSONObject("data").getString("group_name"));
								group_edit_head_des.setText(json.getJSONObject("data").getString("description"));
								group_edit_head_title.setText(json.getJSONObject("data").getString("recommend_title"));

								if(json.getJSONObject("data").getString("color_index").equals("1")){
									edit_text_red.setBackground(getResources().getDrawable(R.drawable.red_up));
									edit_text_yellow.setBackground(getResources().getDrawable(R.drawable.yellow_up));
									edit_text_white.setBackground(getResources().getDrawable(R.drawable.white_up));
									edit_text_black.setBackground(getResources().getDrawable(R.drawable.black_up));
									edit_text_blue.setBackground(getResources().getDrawable(R.drawable.blue_up));
								}else if(json.getJSONObject("data").getString("color_index").equals("2")){
									edit_text_red.setBackground(getResources().getDrawable(R.drawable.red_up));
									edit_text_yellow.setBackground(getResources().getDrawable(R.drawable.yellow_down));
									edit_text_white.setBackground(getResources().getDrawable(R.drawable.white_up));
									edit_text_black.setBackground(getResources().getDrawable(R.drawable.black_up));
									edit_text_blue.setBackground(getResources().getDrawable(R.drawable.blue_up));
								}else if(json.getJSONObject("data").getString("color_index").equals("3")){
									edit_text_red.setBackground(getResources().getDrawable(R.drawable.red_up));
									edit_text_yellow.setBackground(getResources().getDrawable(R.drawable.yellow_up));
									edit_text_white.setBackground(getResources().getDrawable(R.drawable.white_down));
									edit_text_black.setBackground(getResources().getDrawable(R.drawable.black_up));
									edit_text_blue.setBackground(getResources().getDrawable(R.drawable.blue_up));
								}else if(json.getJSONObject("data").getString("color_index").equals("4")){
									edit_text_red.setBackground(getResources().getDrawable(R.drawable.red_up));
									edit_text_yellow.setBackground(getResources().getDrawable(R.drawable.yellow_up));
									edit_text_white.setBackground(getResources().getDrawable(R.drawable.white_up));
									edit_text_black.setBackground(getResources().getDrawable(R.drawable.black_down));
									edit_text_blue.setBackground(getResources().getDrawable(R.drawable.blue_up));
								}else if(json.getJSONObject("data").getString("color_index").equals("5")){
									edit_text_red.setBackground(getResources().getDrawable(R.drawable.red_up));
									edit_text_yellow.setBackground(getResources().getDrawable(R.drawable.yellow_up));
									edit_text_white.setBackground(getResources().getDrawable(R.drawable.white_up));
									edit_text_black.setBackground(getResources().getDrawable(R.drawable.black_up));
									edit_text_blue.setBackground(getResources().getDrawable(R.drawable.blue_down));
								}
								
							} catch (JSONException e) {
								e.printStackTrace();
							}
						} else {
						}
					}

					@Override
					public void onFinish() {
						super.onFinish();
						Config.dismissProgress();
					}

					@Override
					public void onFailure(int statusCode, String content,
							Throwable error) {
						super.onFailure(statusCode, content, error);
					}
				});
	}
	
	
	/**
	 * 更新微社区头部信息
	 * */
	private void updateHeadInfo(final int index, final String str){
		if(str.isEmpty()){
			Toast.makeText(GroupManagerHeadActivity.this, "未输入内容",Toast.LENGTH_SHORT).show();
			return;
		}
		AbRequestParams params = new AbRequestParams();
		params.put("login_user_id", Config.getUser(this).uid);
		params.put("group_id", group_id);
		params.put("color_index", color_index);
		
		if(index == 1){ // 名称
			params.put("group_name", str);
			params.put("description", group_edit_head_des.getText().toString().trim());
			params.put("recommend_title", group_edit_head_title.getText().toString().trim());
		}else if(index == 2){ // 简介
			params.put("description", str);
			params.put("group_name", group_edit_head_name.getText().toString().trim());
			params.put("recommend_title", group_edit_head_title.getText().toString().trim());
		}else if(index == 3){ // 头部提示
			params.put("recommend_title", str);
			params.put("description", group_edit_head_des.getText().toString().trim());
			params.put("group_name", group_edit_head_name.getText().toString().trim());
		}else if(index == 4){ // 颜色
			params.put("recommend_title", group_edit_head_title.getText().toString().trim());
			params.put("description", group_edit_head_des.getText().toString().trim());
			params.put("group_name", group_edit_head_name.getText().toString().trim());
		}
		
		Config.showProgressDialog(GroupManagerHeadActivity.this, false, null);
		ab.post(ServerMutualConfig.editGroupHead, params, new AbStringHttpResponseListener() {
			
			@Override
			public void onSuccess(int statusCode, String content) {
				super.onSuccess(statusCode, content);
				Config.dismissProgress();
				try {
					JSONObject json = new JSONObject(content);
					Toast.makeText(GroupManagerHeadActivity.this,json.getString("reMsg"),Toast.LENGTH_SHORT).show();
					if(json.getBoolean("success")){
						if(index == 1){ // 名称
							group_edit_head_name.setText(str);
						}else if(index == 2){ // 简介
							group_edit_head_des.setText(str);
						}else if(index == 3){ // 头部提示
							group_edit_head_title.setText(str);
						}
						
					}
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
			
			@Override
			public void onFinish() {
				super.onFinish();
				Config.dismissProgress();
			}
			
			@Override
			public void onFailure(int statusCode, String content,
					Throwable error) {
				super.onFailure(statusCode, content, error);
			}
		});
	}
	
	/**
	 * 修改名称
	 * */
	private void updateName(){
		final AlertDialog.Builder builder = new Builder(this);
		builder.setTitle("请输入新名称");
		final EditText edit_name = new EditText(this);
		edit_name.setSingleLine(true);
		edit_name.setMaxEms(10);
		edit_name.setText(group_edit_head_name.getText().toString().trim());
		edit_name.setSelection(group_edit_head_name.getText().toString().trim().length());
		edit_name.setFocusable(true);
		builder.setView(edit_name);
		builder.setNegativeButton("确定", new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface arg0, int arg1) {
				updateHeadInfo(1, edit_name.getText().toString().trim());
				arg0.dismiss();
				((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(edit_name.getWindowToken(), 0);
			}
		});
		builder.setNeutralButton("取消",
				new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				dialog.dismiss();
				((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(edit_name.getWindowToken(), 0);
			}
		});
		
		final AlertDialog dialog = builder.create();
		dialog.show();
		edit_name.setOnEditorActionListener(new OnEditorActionListener(){

			@Override
			public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
				updateHeadInfo(1, edit_name.getText().toString().trim());
				dialog.dismiss();
				((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(edit_name.getWindowToken(), 0);
				return false;
			}
		});
		
		edit_name.setOnFocusChangeListener(new OnFocusChangeListener() {
			
			@Override
			public void onFocusChange(View v, boolean hasFocus) {
				if (hasFocus) {
		            dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
		       }
			}
		});
	}

	
	/**
	 * 修改简介
	 * */
	private void updateDes(){
		final AlertDialog.Builder builder = new Builder(this);
		builder.setTitle("请输入新简介");
		final EditText edit_name = new EditText(this);
		edit_name.setSingleLine(true);
		edit_name.setMaxEms(10);
		edit_name.setText(group_edit_head_des.getText().toString().trim());
		edit_name.setSelection(group_edit_head_des.getText().toString().trim().length());
		edit_name.setFocusable(true);
		builder.setView(edit_name);
		builder.setNegativeButton("确定", new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface arg0, int arg1) {
				updateHeadInfo(2, edit_name.getText().toString().trim());
				arg0.dismiss();
				((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(edit_name.getWindowToken(), 0);
			}
		});
		builder.setNeutralButton("取消",
				new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				dialog.dismiss();
				((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(edit_name.getWindowToken(), 0);
			}
		});
		
		final AlertDialog dialog = builder.create();
		dialog.show();
		edit_name.setOnEditorActionListener(new OnEditorActionListener(){
			

			@Override
			public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
				updateHeadInfo(2, edit_name.getText().toString().trim());
				dialog.dismiss();
				((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(edit_name.getWindowToken(), 0);
				return false;
			}
		});
		
		edit_name.setOnFocusChangeListener(new OnFocusChangeListener() {
			
			@Override
			public void onFocusChange(View v, boolean hasFocus) {
				if (hasFocus) {
		            dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
		       }
			}
		});
	}

	
	/**
	 * 修改提示文字
	 * */
	private void updateHint(){
		final AlertDialog.Builder builder = new Builder(this);
		builder.setTitle("请输入提示文字");
		final EditText edit_name = new EditText(this);
		edit_name.setSingleLine(true);
		edit_name.setMaxEms(10);
		edit_name.setText(group_edit_head_title.getText().toString().trim());
		edit_name.setSelection(group_edit_head_title.getText().toString().trim().length());
		edit_name.setFocusable(true);
		builder.setView(edit_name);
		builder.setNegativeButton("确定", new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface arg0, int arg1) {
				
//				if(edit_name.getText().toString().trim().length() > 10){
//					Toast.makeText(GroupManagerHeadActivity.this, "提示文字最多10个字", 3).show();
//					return;
//				}
				
				updateHeadInfo(3, edit_name.getText().toString().trim());
				arg0.dismiss();
				((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(edit_name.getWindowToken(), 0);
			}
		});
		builder.setNeutralButton("取消",
				new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				dialog.dismiss();
				((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(edit_name.getWindowToken(), 0);
			}
		});
		
		final AlertDialog dialog = builder.create();
		dialog.show();
		edit_name.setOnEditorActionListener(new OnEditorActionListener(){
			

			@Override
			public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
				updateHeadInfo(3, edit_name.getText().toString().trim());
				dialog.dismiss();
				((InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(edit_name.getWindowToken(), 0);
				return false;
			}
		});
		
		edit_name.setOnFocusChangeListener(new OnFocusChangeListener() {
			
			@Override
			public void onFocusChange(View v, boolean hasFocus) {
				if (hasFocus) {
		            dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
		       }
			}
		});
	}

	
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (resultCode == RESULT_OK) {  
			String imgPath = "";
			if(null == data){
				imgPath = VideoComperssUtils.getVideoPath(GroupManagerHeadActivity.this, imageUri);
			}else{
				imgPath = VideoComperssUtils.getVideoPath(GroupManagerHeadActivity.this, data);
			}
			Config.showProgressDialog(GroupManagerHeadActivity.this, true, null);
			
			AbRequestParams params = new AbRequestParams();
			params.put("login_user_id", Config.getUser(this).uid);
			params.put("group_id", group_id);
			params.put("color_index", color_index);
			params.put("description", group_edit_head_des.getText().toString().trim());
			params.put("group_name", group_edit_head_name.getText().toString().trim());
			params.put("recommend_title", group_edit_head_title.getText().toString().trim());
			params.put("cover", new File(imgPath));
			ab.post(ServerMutualConfig.editGroupHead, params, new AbStringHttpResponseListener() {
				
				@Override
				public void onSuccess(int statusCode,
						String content) {
					super.onSuccess(statusCode, content);
					Config.dismissProgress();
					try {
						JSONObject json = new JSONObject(content);
						if (json.getBoolean("success")) {
								MyApplication.getInstance().display(json.getJSONObject("data").getString("cover"), group_edit_head_img, R.drawable.def_image);
						}
						Toast.makeText(GroupManagerHeadActivity.this,json.getString("reMsg"),Toast.LENGTH_SHORT).show();
					} catch (JSONException e) {
						e.printStackTrace();
					}
				}
				
				@Override
				public void onFinish() {
					super.onFinish();
				}
				
				@Override
				public void onFailure(int statusCode,
						String content, Throwable error) {
					super.onFailure(statusCode, content, error);
				}
			});
		}}
}