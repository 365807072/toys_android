package com.yyqq.code.toyslease.version_92;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Color;
import android.os.Bundle;
import android.provider.Settings;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.ab.http.AbHttpUtil;
import com.ab.http.AbRequestParams;
import com.ab.http.AbStringHttpResponseListener;
import com.umeng.analytics.MobclickAgent;
import com.yyqq.babyshow.R;
import com.yyqq.code.login.WebLoginActivity;
import com.yyqq.code.toyslease.InviteFriendActivity;
import com.yyqq.code.toyslease.ToysLeaseDepositActivity;
import com.yyqq.code.toyslease.ToysLeaseMainTabActivity;
import com.yyqq.code.toyslease.ToysLeaseOrderDetailActivity;
import com.yyqq.code.toyslease.ToysLeasePayConfirmActivity;
import com.yyqq.code.toyslease.h5.ToysLeaseHtmlInterstActivity;
import com.yyqq.commen.adapter.ToysLeaseOrderListAdapter02;
import com.yyqq.commen.model.ToysOrderItemBean;
import com.yyqq.commen.model.ToysOrderListBean;
import com.yyqq.commen.share.GroupSharedUtils;
import com.yyqq.commen.utils.Config;
import com.yyqq.commen.view.PullDownView;
import com.yyqq.commen.view.PullDownView.OnPullDownListener;
import com.yyqq.framework.activity.BaseActivity;
import com.yyqq.framework.application.MyApplication;
import com.yyqq.framework.application.ServerMutualConfig;


/**
 * 玩具订单首页
 * */
public class ToysLeaseMainOrderActivity extends BaseActivity implements OnPullDownListener{

	private PullDownView mPullDownView;
	private ListView listview;
	private RelativeLayout mRelativeLayout;
	private RelativeLayout toys_order_myprice;
	private TextView toys_order_myprice_hint;
	private TextView toys_order_myprice_monery;
	private TextView toys_order_myprice_hint_02;
	private TextView toys_order_myprice_monery_02;
	private ImageView lease_main_right;
	private ImageView toys_order_to_main;
	private RelativeLayout toys_order_interst;
	private RelativeLayout show_shared;
	private ImageView show_shared_cancel;
	private ImageView show_shared_show;
	
	public static boolean NEED_UPDATE = true;
	private boolean isIntent = false;
	private AbHttpUtil ab;
	private LayoutInflater inflater;
	public static ToysLeaseOrderListAdapter02 adapter = null;
	public static ArrayList<ToysOrderListBean> orderList = new ArrayList<ToysOrderListBean>();
	private SharedPreferences sp_main_list;
	private Editor ed_main_list;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		Config.setActivityState(this);
		setContentView(R.layout.activity_toys_lease_order_list);
	}

	@Override
	protected void initView() {
		ab = AbHttpUtil.getInstance(this);
		inflater = LayoutInflater.from(this);
		show_shared_show = (ImageView) findViewById(R.id.show_shared_show);
		show_shared_cancel = (ImageView) findViewById(R.id.show_shared_cancel);
		show_shared = (RelativeLayout) findViewById(R.id.show_shared);
		toys_order_interst = (RelativeLayout) findViewById(R.id.toys_order_interst);
		toys_order_to_main = (ImageView) findViewById(R.id.toys_order_to_main);
		toys_order_myprice = (RelativeLayout) findViewById(R.id.toys_order_myprice);
		toys_order_myprice_hint = (TextView) findViewById(R.id.toys_order_myprice_hint);
		toys_order_myprice_monery = (TextView) findViewById(R.id.toys_order_myprice_monery);
		toys_order_myprice_hint_02 = (TextView) findViewById(R.id.toys_order_myprice_hint_02);
		toys_order_myprice_monery_02 = (TextView) findViewById(R.id.toys_order_myprice_monery_02);
		mPullDownView = (PullDownView) findViewById(R.id.list);
		mPullDownView.setOnPullDownListener(this);
		mPullDownView.setShowHeader();// 显示并且可以使用头部刷新
		listview = mPullDownView.getListView();
		listview.setDivider(null);
		if (adapter == null) {
			adapter = new ToysLeaseOrderListAdapter02(ToysLeaseMainOrderActivity.this, inflater, orderList, ab);
		}
		listview.setAdapter(adapter);

		mPullDownView.enableAutoFetchMore(true, 1);// 设置可以自动获取更多 滑到最后一个自动获取
		lease_main_right = (ImageView) findViewById(R.id.lease_main_right);
	}

	@Override
	protected void initData() {
		sp_main_list = getSharedPreferences("order_main_list", Context.MODE_PRIVATE);
		ed_main_list = sp_main_list.edit();
		
		// 加载右上角图片
		getRightIcon();
		
		if(ToysLeasePayConfirmActivity.showShared){
			getSharedInfo();
		}else{
			show_shared.setVisibility(View.GONE);
		}
		
	}

	@Override
	protected void setListener() {
		
		show_shared_cancel.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				show_shared.setVisibility(View.GONE);
			}
		});
		
		show_shared.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				show_shared.setVisibility(View.GONE);
			}
		});
		
		toys_order_interst.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				Intent in = new Intent(v.getContext(), ToysLeaseHtmlInterstActivity.class);
				startActivity(in);
			}
		});
		
		toys_order_to_main.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				ToysLeaseMainTabActivity.tabHost.setCurrentTab(0);
			}
		});
		
		lease_main_right.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				 // 检查登录状态
				if(!MyApplication.getVisitor().equals("0")  || Config.getUser(ToysLeaseMainOrderActivity.this).uid.equals("")){
					Intent in = new Intent(ToysLeaseMainOrderActivity.this, WebLoginActivity.class);
					startActivity(in);
				}else{
					Intent intent = new Intent(ToysLeaseMainOrderActivity.this, InviteFriendActivity.class);
					startActivity(intent);
				}
			}
		});
		
		toys_order_myprice.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				Intent intent = new Intent(ToysLeaseMainOrderActivity.this, ToysLeaseDepositActivity.class);
				startActivity(intent);
			}
		});
		
	}

	@Override
	public void onRefresh() {
		getOrderData(false);
	}

	@Override
	public void onMore() {
		getOrderData(true);
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		MobclickAgent.onResume(this);
		
		// 修改底部栏文字颜色
		ToysLeaseMainTabActivity.iconText.get(0).setTextColor(Color.parseColor("#000000"));
		ToysLeaseMainTabActivity.iconText.get(1).setTextColor(Color.parseColor("#000000"));
		ToysLeaseMainTabActivity.iconText.get(2).setTextColor(Color.parseColor("#000000"));
		ToysLeaseMainTabActivity.iconText.get(3).setTextColor(Color.parseColor("#fe6363"));
		
		if(isIntent && !MyApplication.getVisitor().equals("0")  || Config.getUser(ToysLeaseMainOrderActivity.this).uid.equals("")){
			if(null != ToysLeaseMainTabActivity.toysLeaseMainTabActivity){
				ToysLeaseMainTabActivity.toysLeaseMainTabActivity.finish();
			}
			Intent in = new Intent(ToysLeaseMainOrderActivity.this, ToysLeaseMainTabActivity.class);
			startActivity(in);
			this.finish();
		}else if(!isIntent && !MyApplication.getVisitor().equals("0")  || Config.getUser(ToysLeaseMainOrderActivity.this).uid.equals("")){
			isIntent = true;
			Intent in = new Intent(ToysLeaseMainOrderActivity.this, WebLoginActivity.class);
			startActivity(in);
		}else{
			// 刷新数据
			if(Config.isConn(this)){
//				if(NEED_UPDATE){
					onRefresh();					
//					mPullDownView.setVisibility(View.GONE);
//				}else{
//					NEED_UPDATE = true;
//				}
			}else{
				toys_order_myprice.setVisibility(View.GONE);
				toys_order_interst.setVisibility(View.GONE);
				mPullDownView.setVisibility(View.GONE);
				findViewById(R.id.net_error).setVisibility(View.VISIBLE);
				findViewById(R.id.net_error).setOnClickListener(new OnClickListener() {
					
					@Override
					public void onClick(View v) {
						startActivity(new Intent(Settings.ACTION_SETTINGS ));
					}
				});
			}
		}
	}
	
	@Override
	protected void onPause() {
		super.onPause();
		MobclickAgent.onPause(this);
	}
	
	/**
	 * 获取订单列表
	 * */
	private void getOrderData(final boolean isMore){
		Config.showProgressDialog(this, false, null);
		AbRequestParams params = new AbRequestParams();
		params.put("login_user_id", Config.getUser(this).uid);
		
		if(isMore && orderList.size() != 0){
			params.put("post_create_time", orderList.get(orderList.size()-1).getPost_create_time());
		}else{
			orderList.clear();
		}
		
		ab.get(ServerMutualConfig.GET_TOYS_ORDER_LIST + "&" + params.toString(), new AbStringHttpResponseListener() {
			
			@Override
			public void onSuccess(int statusCode, String content) {
				super.onSuccess(statusCode, content);
				initListData(content, isMore);
			}
			
			@Override
			public void onFinish() {
				super.onFinish();
				mPullDownView.RefreshComplete();// 这个事线程安全的 可看源代码
				mPullDownView.notifyDidMore();
			}
			
			@Override
			public void onFailure(int statusCode, String content,
					Throwable error) {
				super.onFailure(statusCode, content, error);
				Config.dismissProgress();
			}
		});
	}
	
	
	/**
	 * 初始化列表数据
	 * */
	private void initListData(String content, boolean isMore){
		try {
			if(new JSONObject(content).getBoolean("success")){
				
				mPullDownView.setVisibility(View.VISIBLE);
				
				JSONArray data = new JSONObject(content).getJSONArray("data");
				
				if(data.length() != 0){
					
					toys_order_to_main.setVisibility(View.GONE);
					toys_order_myprice.setVisibility(View.VISIBLE);
					toys_order_interst.setVisibility(View.VISIBLE);
					
					// 押金相关+预约相关
					if(!isMore){
						// 更新缓存
						ed_main_list.putString("order_main_list", content);
						ed_main_list.commit();
						
						if(data.getJSONObject(0).getString("order_status").equals("1")){
							toys_order_myprice.setVisibility(View.VISIBLE);
							toys_order_myprice_hint.setText(data.getJSONObject(0).getJSONArray("toys_info").getJSONObject(0).getString("business_title"));
							toys_order_myprice_monery.setText(data.getJSONObject(0).getJSONArray("toys_info").getJSONObject(0).getString("sell_price"));
						}else{
							toys_order_myprice.setVisibility(View.GONE);
						}
						
						toys_order_interst.setVisibility(View.VISIBLE);
						toys_order_myprice_hint_02.setText(data.getJSONObject(1).getJSONArray("toys_info").getJSONObject(0).getString("business_title"));
						toys_order_myprice_monery_02.setText(data.getJSONObject(1).getJSONArray("toys_info").getJSONObject(0).getString("sell_price"));
						
					}
					
					ToysOrderListBean bean = null;
					for(int i = 0 ; i < data.length() ; i++ ){
						// 如果是押金，则此条数据不加入列表
						if(!data.getJSONObject(i).getString("order_status").equals("1")){
							bean = new ToysOrderListBean();
							bean.setCombined_order_id(data.getJSONObject(i).getString("combined_order_id"));
							bean.setIs_del(data.getJSONObject(i).getString("is_del"));
							bean.setIs_reset(data.getJSONObject(i).getString("is_reset"));
							bean.setPost_create_time(data.getJSONObject(i).getString("post_create_time"));
							bean.setOrder_state(data.getJSONObject(i).getString("order_status"));
							bean.setToys_title(data.getJSONObject(i).getString("toys_title"));
							
							ArrayList<ToysOrderItemBean> itemList = new ArrayList<ToysOrderItemBean>();
							ToysOrderItemBean itemBean = null;
							for(int j = 0 ; j < data.getJSONObject(i).getJSONArray("toys_info").length() ; j++ ){
								itemBean = new ToysOrderItemBean();
								itemBean.setBusiness_id(data.getJSONObject(i).getJSONArray("toys_info").getJSONObject(j).getString("business_id"));
								itemBean.setBusiness_title(data.getJSONObject(i).getJSONArray("toys_info").getJSONObject(j).getString("business_title"));
								itemBean.setImg_thumb(data.getJSONObject(i).getJSONArray("toys_info").getJSONObject(j).getString("img_thumb"));
								itemBean.setIs_reset(data.getJSONObject(i).getJSONArray("toys_info").getJSONObject(j).getString("is_reset"));
								itemBean.setOrder_id(data.getJSONObject(i).getJSONArray("toys_info").getJSONObject(j).getString("order_id"));
								itemBean.setSell_price(data.getJSONObject(i).getJSONArray("toys_info").getJSONObject(j).getString("sell_price"));
								itemBean.setStatus(data.getJSONObject(i).getJSONArray("toys_info").getJSONObject(j).getString("status"));
								itemBean.setIs_del(data.getJSONObject(i).getJSONArray("toys_info").getJSONObject(j).getString("is_del"));
								itemBean.setStatus_name(data.getJSONObject(i).getJSONArray("toys_info").getJSONObject(j).getString("status_name")+"  "+data.getJSONObject(i).getJSONArray("toys_info").getJSONObject(j).getString("toys_card_info"));
								itemBean.setOrder_status(data.getJSONObject(i).getJSONArray("toys_info").getJSONObject(j).getString("order_status"));
								itemBean.setIs_jump(data.getJSONObject(i).getJSONArray("toys_info").getJSONObject(j).getString("is_jump"));
								itemBean.setPost_url(data.getJSONObject(i).getJSONArray("toys_info").getJSONObject(j).getString("post_url"));
								itemBean.setCategory_icon_url(data.getJSONObject(i).getJSONArray("toys_info").getJSONObject(j).getString("size_img_thumb"));
								itemList.add(itemBean);
							}
							bean.setItemList(itemList);
							orderList.add(bean);
						}
					}
					adapter.notifyDataSetChanged();
				}else{
					// 无订单情况下
					if(!isMore){
						toys_order_to_main.setVisibility(View.VISIBLE);
						toys_order_myprice.setVisibility(View.GONE);
						toys_order_interst.setVisibility(View.GONE);
						mPullDownView.setVisibility(View.GONE);
					}
				}
				
				if(data.length() < 10){
					mPullDownView.setHideFooter();
				}else{
					mPullDownView.setShowFooter();
				}
				
				if(!ToysLeaseMainTabActivity.order_id.equals("")){
					Intent intent = new Intent(ToysLeaseMainOrderActivity.this, ToysLeaseOrderDetailActivity.class);
					intent.putExtra(ToysLeaseOrderDetailActivity.ORDER_ID_KEY, ToysLeaseMainTabActivity.order_id);
					ToysLeaseMainOrderActivity.this.startActivity(intent);
					ToysLeaseMainTabActivity.order_id = "";
				}
				
			}
		} catch (Exception e) {
		}
		Config.dismissProgress();
	}
	
	/**
	 * 获取分享信息
	 * */
	private void getSharedInfo(){
		AbRequestParams params = new AbRequestParams();
		params.put("login_user_id", Config.getUser(this).uid);
		
		ab.get(ServerMutualConfig.GET_SHARED_INFO + "&" + params.toString(), new AbStringHttpResponseListener() {
			
			@Override
			public void onSuccess(int statusCode, final String content) {
				super.onSuccess(statusCode, content);
				try {
					if(new JSONObject(content).getBoolean("success")){
						if(new JSONObject(content).getJSONObject("data").getString("display_status").equals("1")){
							show_shared.setVisibility(View.VISIBLE);
							ToysLeasePayConfirmActivity.showShared = false;
							
							show_shared_show.setOnClickListener(new OnClickListener() {
								
								@Override
								public void onClick(View v) {
									
									show_shared.setVisibility(View.GONE);
									ToysLeasePayConfirmActivity.showShared = false;
									
									GroupSharedUtils.groupShareBean bean = new GroupSharedUtils.groupShareBean();
									bean.setContext(ToysLeaseMainOrderActivity.this);
									try {
										bean.setShare_img(new JSONObject(content).getJSONObject("data").getString("window_img"));
										bean.setShare_text(new JSONObject(content).getJSONObject("data").getString("second_title"));
										bean.setShare_title(new JSONObject(content).getJSONObject("data").getString("main_title"));
										bean.setShare_url(new JSONObject(content).getJSONObject("data").getString("post_url"));
										GroupSharedUtils.SharedGroup(bean, new JSONObject(content).getJSONObject("data").getString("activity_post_url"));
									} catch (JSONException e) {
										e.printStackTrace();
									}
								}
							});
							
						}else{
							show_shared.setVisibility(View.GONE);
							ToysLeasePayConfirmActivity.showShared = false;
						}
					}
				} catch (Exception e) {
				}
			}
			
			@Override
			public void onFinish() {
				super.onFinish();
			}
			
			@Override
			public void onFailure(int statusCode, String content,
					Throwable error) {
				super.onFailure(statusCode, content, error);
				Config.dismissProgress();
			}
		});
	}
	
	/**
	 * 获取右上角图标
	 * */
	private void getRightIcon(){
		AbRequestParams params = new AbRequestParams();
		params.put("login_user_id", Config.getUser(this).uid);
		ab.get(ServerMutualConfig.GET_RIGHT_ICON + "&" + params.toString(), new AbStringHttpResponseListener() {
			
			@Override
			public void onSuccess(int statusCode, String content) {
				super.onSuccess(statusCode, content);
				try {
					if(new JSONObject(content).getBoolean("success")){
						// 加载右上角图片
						MyApplication.getInstance().display(new JSONObject(content).getJSONObject("data").getString("icon_img"), lease_main_right, R.drawable.def_image);
					}
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}

			@Override
			public void onFinish() {
				super.onFinish();
			}

			@Override
			public void onFailure(int statusCode, String content,
					Throwable error) {
				super.onFailure(statusCode, content, error);
			}
		});
	}
	
//	/**
//	 * 回滚到顶部
//	 * */
//	private void setListViewPos(int pos) {
//		if (android.os.Build.VERSION.SDK_INT >= 8) {
//			listview.smoothScrollToPosition(pos);
//		} else {
//			listview.setSelection(pos);
//		}
//	}
}
