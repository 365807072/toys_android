package com.yyqq.code.photo;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.ref.SoftReference;
import java.util.HashMap;

import com.yyqq.framework.callback.ImageCallback;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.Bitmap.CompressFormat;
import android.media.ExifInterface;
import android.os.Environment;
import android.os.Handler;
import android.text.TextUtils;
import android.util.Log;
import android.widget.ImageView;

public class BitmapCache extends Activity {
	public Handler h = new Handler();
	public final String TAG = getClass().getSimpleName();
	private HashMap<String, SoftReference<Bitmap>> imageCache = new HashMap<String, SoftReference<Bitmap>>();

	public void put(String path, Bitmap bmp) {
		if (!TextUtils.isEmpty(path) && bmp != null) {
			imageCache.put(path, new SoftReference<Bitmap>(bmp));
		}
	}

	public void displayBmp(final ImageView iv, final String thumbPath,
			final String sourcePath, final ImageCallback callback) {
		if (TextUtils.isEmpty(thumbPath) && TextUtils.isEmpty(sourcePath)) {
			return;
		}
		final String path;
		final boolean isThumbPath;
		if (!TextUtils.isEmpty(thumbPath)) {
			path = thumbPath;
			isThumbPath = true;
		} else if (!TextUtils.isEmpty(sourcePath)) {
			path = sourcePath;
			isThumbPath = false;
		} else {
			return;
		}
		if (imageCache.containsKey(path)) {
			SoftReference<Bitmap> reference = imageCache.get(path);
			Bitmap bmp = reference.get();
			if (bmp != null) {
				if (callback != null) {
					callback.imageLoad(iv, bmp, sourcePath);
				}
				iv.setImageBitmap(bmp);
				return;
			}
		}
		iv.setImageBitmap(null);
		new Thread() {
			Bitmap thumb;

			public void run() {
				try {
					if (isThumbPath) {
						thumb = revitionImageSize(thumbPath, sourcePath);
					} else {
						thumb = revitionImageSize(thumbPath, sourcePath);
					}
				} catch (Exception e) {
				}
				if (thumb == null) {
					thumb = TestPicActivity.bimap;
				}
				// Log.e(TAG, "-------thumb------" + thumb);
				put(path, thumb);
				if (callback != null) {
					h.post(new Runnable() {
						@Override
						public void run() {
							callback.imageLoad(iv, thumb, sourcePath);
						}
					});
				}
			}
		}.start();
	}

	public static Bitmap revitionImageSize(String thumbPath, String path)
			throws IOException {
		BufferedInputStream in = new BufferedInputStream(new FileInputStream(
				new File(path)));

		Bitmap bitmap = null;
		int degree;
		degree = readPictureDegree(path);
		if (degree == 0 && !TextUtils.isEmpty(thumbPath)) {
			bitmap = BitmapFactory.decodeFile(thumbPath);
		} else {
			BitmapFactory.Options options = new BitmapFactory.Options();
			options.inJustDecodeBounds = true;
			BitmapFactory.decodeStream(in, null, options);
			in.close();
			int i = 0;
			while (true) {
				if ((options.outWidth >> i <= 256)
						&& (options.outHeight >> i <= 256)) {
					in = new BufferedInputStream(new FileInputStream(new File(
							path)));

					// 新+代码
					if (i > 2) {

						options.inSampleSize = 5;

					} else {

						options.inSampleSize = (int) Math.pow(2.0D, i);

					}
					options.inJustDecodeBounds = false;

					bitmap = BitmapFactory.decodeStream(in, null, options);

					break;
				}
				i += 1;

			}
			if (degree != 0) {
				bitmap = rotaingImageView(degree, bitmap);
			}
		}
		return bitmap;
	}

	public static File creatNewBitmap(String path, String newPath)
			throws IOException {
		Bitmap bitmap = getRevitionImage(path);
		int degree;
		degree = readPictureDegree(path);
		// if (degree == 0) {
		// return new File(path);
		// } else {
//		if (degree != 0) {
			newPath = Environment.getExternalStorageDirectory()
					.getAbsolutePath() + "/Download/cache_files/" + newPath;
			if (degree != 0)
				bitmap = rotaingImageView(degree, bitmap);
			FileOutputStream fos = new FileOutputStream(newPath);
			bitmap.compress(CompressFormat.JPEG, 85, fos);
			fos.flush();
			fos.close();
//		}
		// }
		return new File(newPath);
	}

	// options.inSampleSize = (int) Math.pow(2.0D, i);
	// options.inJustDecodeBounds = false;
	// bitmap = BitmapFactory.decodeStream(in, null, options);
	// break;
	// }
	// i += 1;
	// }
	// bitmap = rotaingImageView(degree ,bitmap);
	// return bitmap;
	// }

	// 新+代码

	/**
	 * 读取图片属性：旋转的角度
	 * 
	 * @param path图片绝对路径
	 * @return degree旋转的角度
	 */
	public static int readPictureDegree(String path) {
		int degree = 0;
		try {
			ExifInterface exifInterface = new ExifInterface(path);
			int orientation = exifInterface.getAttributeInt(
					ExifInterface.TAG_ORIENTATION,
					ExifInterface.ORIENTATION_NORMAL);
			switch (orientation) {
			case ExifInterface.ORIENTATION_ROTATE_90:
				degree = 90;
				break;
			case ExifInterface.ORIENTATION_ROTATE_180:
				degree = 180;
				break;
			case ExifInterface.ORIENTATION_ROTATE_270:
				degree = 270;
				break;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return degree;
	}

	/**
	 * 旋转图片
	 * 
	 * @param angle
	 * @param bitmap
	 * @return Bitmap
	 */
	public static Bitmap rotaingImageView(int angle, Bitmap bitmap) {
		// 旋转图片 动作
		Matrix matrix = new Matrix();
		;
		matrix.postRotate(angle);
		System.out.println("angle2=" + angle);
		// 创建新的图片
		Bitmap resizedBitmap = Bitmap.createBitmap(bitmap, 0, 0,
				bitmap.getWidth(), bitmap.getHeight(), matrix, true);
		return resizedBitmap;
	}

	public static File createRotaingFile(String path, String newPath) {
		Matrix matrix = new Matrix();
		float angle;
		Bitmap bitmap = null;
		angle = readPictureDegree(path);
		FileOutputStream fos;
		if (angle == 0) {

			newPath = Environment.getExternalStorageDirectory()
					.getAbsolutePath() + "/Download/cache_files/" + newPath;
			try {

				bitmap = getRevitionImage(path);
				fos = new FileOutputStream(newPath);
				Bitmap resizedBitmap = Bitmap.createBitmap(bitmap, 0, 0,
						bitmap.getWidth(), bitmap.getHeight(), matrix, true);
				resizedBitmap.compress(CompressFormat.JPEG, 75, fos);
				fos.flush();
				fos.close();
			} catch (Exception e) {
				e.printStackTrace();
			}

		} else {
			matrix.postRotate(angle);
			try {
				bitmap = getRevitionImage(path);

				newPath = Environment.getExternalStorageDirectory()
						.getAbsolutePath() + "/Download/cache_files/" + newPath;
				fos = new FileOutputStream(newPath);
				Bitmap resizedBitmap = Bitmap.createBitmap(bitmap, 0, 0,
						bitmap.getWidth(), bitmap.getHeight(), matrix, true);
				resizedBitmap.compress(CompressFormat.JPEG, 75, fos);
				fos.flush();
				fos.close();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return new File(newPath);
	}

	public static Bitmap comp(Bitmap image) {

		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		image.compress(Bitmap.CompressFormat.JPEG, 100, baos);
		if (baos.toByteArray().length / 1024 > 1024) {// 判断如果图片大于1M,进行压缩避免在生成图片（BitmapFactory.decodeStream）时溢出
			baos.reset();// 重置baos即清空baos
			image.compress(Bitmap.CompressFormat.JPEG, 50, baos);// 这里压缩50%，把压缩后的数据存放到baos中
		}
		ByteArrayInputStream isBm = new ByteArrayInputStream(baos.toByteArray());
		BitmapFactory.Options newOpts = new BitmapFactory.Options();
		// 开始读入图片，此时把options.inJustDecodeBounds 设回true了
		newOpts.inJustDecodeBounds = true;
		Bitmap bitmap = BitmapFactory.decodeStream(isBm, null, newOpts);
		newOpts.inJustDecodeBounds = false;
		int w = newOpts.outWidth;
		int h = newOpts.outHeight;
		// 现在主流手机比较多是800*480分辨率，所以高和宽我们设置为
		float hh = 800f;// 这里设置高度为800f
		float ww = 480f;// 这里设置宽度为480f
		// 缩放比。由于是固定比例缩放，只用高或者宽其中一个数据进行计算即可
		int be = 1;// be=1表示不缩放
		if (w > h && w > ww) {// 如果宽度大的话根据宽度固定大小缩放
			be = (int) (newOpts.outWidth / ww);
		} else if (w < h && h > hh) {// 如果高度高的话根据宽度固定大小缩放
			be = (int) (newOpts.outHeight / hh);
		}
		if (be <= 0)
			be = 1;
		newOpts.inSampleSize = be;// 设置缩放比例
		newOpts.inPreferredConfig = Config.RGB_565;// 降低图片从ARGB888到RGB565
		// 重新读入图片，注意此时已经把options.inJustDecodeBounds 设回false了
		isBm = new ByteArrayInputStream(baos.toByteArray());
		bitmap = BitmapFactory.decodeStream(isBm, null, newOpts);
		return compressImage(bitmap);// 压缩好比例大小后再进行质量压缩
	}

	private static Bitmap compressImage(Bitmap bitmap) {
		// TODO Auto-generated method stub
		return null;
	}

	public static File zoomImg1(String path, String newPath) {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		FileOutputStream fos = null;

		Bitmap image = null;
		newPath = Environment.getExternalStorageDirectory().getAbsolutePath()
				+ "/download/cache_files/" + newPath;
		try {
			image = getRevitionImage(path);
		} catch (IOException e) {
			e.printStackTrace();
		}

		image.compress(Bitmap.CompressFormat.JPEG, 100, baos);

		try {
			if (baos.toByteArray().length / 1024 < 200) {
				newPath = path;
			} else if (baos.toByteArray().length > 10000000) {
				fos = new FileOutputStream(newPath);
				image.compress(Bitmap.CompressFormat.JPEG, 72, fos);
			} else if (baos.toByteArray().length > 3500000) {
				fos = new FileOutputStream(newPath);
				image.compress(Bitmap.CompressFormat.JPEG, 51, fos);
			} else if (baos.toByteArray().length > 2000000) {
				fos = new FileOutputStream(newPath);
				image.compress(Bitmap.CompressFormat.JPEG, 42, fos);
			} else if (baos.toByteArray().length > 1000000) {
				fos = new FileOutputStream(newPath);
				image.compress(Bitmap.CompressFormat.JPEG, 34, fos);
			} else if (baos.toByteArray().length > 500000) {
				fos = new FileOutputStream(newPath);
				image.compress(Bitmap.CompressFormat.JPEG, 27, fos);
			} else if (baos.toByteArray().length > 200000) {
				fos = new FileOutputStream(newPath);
				image.compress(Bitmap.CompressFormat.JPEG, 20, fos);
			} else if (baos.toByteArray().length > 20000) {
				fos = new FileOutputStream(newPath);
				image.compress(Bitmap.CompressFormat.JPEG, 10, fos);
			}

			fos.flush();
			fos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new File(newPath);
	}

	/**
	 * 缩放图片
	 * 
	 * @author 樊樊
	 * @param path
	 * @param newPath
	 * @param newWidth
	 * @return
	 */

	public static File zoomImg(String path, String newPath, int th) {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		FileOutputStream fos = null;

		Bitmap image = null;
		newPath = Environment.getExternalStorageDirectory().getAbsolutePath()
				+ "/download/cache_files/" + newPath;
		try {
			image = getRevitionImage(path);
		} catch (IOException e) {
			e.printStackTrace();
		}
		int options = 0;

		image.compress(Bitmap.CompressFormat.JPEG, 100, baos);

		if (baos.toByteArray().length / 1024 < th) {
			newPath = path;
		} else if (baos.toByteArray().length / 1024 > th) {

			options = baos.toByteArray().length / 1024 / th;

			if (options >= 50) {
				options = 10;
			} else if (options >= 40) {
				options = 20;
			} else if (options >= 30) {
				options = 40;
			} else if (options >= 20) {
				options = 60;
			} else if (options >= 10) {
				options = 70;
			} else if (options >= 5) {
				options = 80;
			} else {
				options = 100 - options;
			}
			try {
				fos = new FileOutputStream(newPath);
				image.compress(Bitmap.CompressFormat.JPEG, options, fos);
				fos.flush();
				fos.close();
			} catch (Exception e) {
				e.printStackTrace();
			}

		}

		return new File(newPath);
	}

	// 图片旋转
	public static File getImgshow(String path, String newPath, int newWidth) {
		Matrix matrix = new Matrix();
		float angle;
		Bitmap bitmap = null;
		int fa = 0;
		angle = readPictureDegree(path);
		matrix.postRotate(angle);
		FileOutputStream fos;
		try {

			bitmap = getRevitionImage(path);

			newPath = Environment.getExternalStorageDirectory()
					.getAbsolutePath() + "/Download/cache_files/" + newPath;

			fos = new FileOutputStream(newPath);

			if (bitmap.getWidth() > newWidth) {
				fa = (bitmap.getWidth() - newWidth) / 2;
			}

			Bitmap resizedBitmap = Bitmap.createBitmap(bitmap, fa, 0, newWidth,
					bitmap.getHeight(), matrix, true);

			resizedBitmap.compress(CompressFormat.JPEG, 75, fos);

			fos.flush();
			fos.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return new File(newPath);
	}

	public static Bitmap getRevitionImage(String path) throws IOException {
		BufferedInputStream in = new BufferedInputStream(new FileInputStream(
				new File(path)));
		BitmapFactory.Options options = new BitmapFactory.Options();
		options.inJustDecodeBounds = true;
		BitmapFactory.decodeStream(in, null, options);
		in.close();
		Bitmap bitmap = null;
		in = new BufferedInputStream(new FileInputStream(new File(path)));

		options.inJustDecodeBounds = false;

		bitmap = BitmapFactory.decodeStream(in, null, options);
		return bitmap;
	}

	/**
	 * 压缩图片尺寸
	 * 
	 * @param path
	 * @return
	 * @throws IOException
	 */
	public static Bitmap getFile(String srcPath) {
		BitmapFactory.Options newOpts = new BitmapFactory.Options();
		FileOutputStream fos = null;
		// 开始读入图片，此时把options.inJustDecodeBounds 设回true了
		newOpts.inJustDecodeBounds = true;
		Bitmap bitmap = BitmapFactory.decodeFile(srcPath, newOpts);// 此时返回bm为空

		newOpts.inJustDecodeBounds = false;
		int w = newOpts.outWidth;
		int h = newOpts.outHeight;
		// 现在主流手机比较多是800*480分辨率，所以高和宽我们设置为
		float hh = 800f;
		float ww = 480f;
		// 缩放比，只用高或者宽其中一个数据进行计算即可
		int be = 1;// be=1表示不缩放
		if (w > h && w > ww) {// 如果宽度大的话根据宽度固定大小缩放
			be = (int) (newOpts.outWidth / ww);
		} else if (w < h && h > hh) {// 如果高度高的话根据宽度固定大小缩放
			be = (int) (newOpts.outHeight / hh);
		}
		if (be <= 0)
			be = 1;
		newOpts.inSampleSize = be;// 设置缩放比例
		// 重新读入图片，注意此时已经把options.inJustDecodeBounds 设回false了
		bitmap = BitmapFactory.decodeFile(srcPath, newOpts);

		try {
			fos = new FileOutputStream(srcPath);
			bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fos);
			fos.flush();
			fos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return bitmap;// 压缩好比例大小后再进行质量压缩
	}

	/**
	 * 压缩图片尺寸
	 * 
	 * @param path
	 * @return
	 * @throws IOException
	 */
	public static File getimageyang(String srcPath, String newPath, String Img) {
		BitmapFactory.Options newOpts = new BitmapFactory.Options();
		FileOutputStream fos = null;
		// 开始读入图片，此时把options.inJustDecodeBounds 设回true了
		newOpts.inJustDecodeBounds = true;
		Bitmap bitmap = BitmapFactory.decodeFile(srcPath, newOpts);// 此时返回bm为空

		newOpts.inJustDecodeBounds = false;
		int w = newOpts.outWidth;
		int h = newOpts.outHeight;
		// 现在主流手机比较多是800*480分辨率，所以高和宽我们设置为
		float hh = 800f;
		float ww = 480f;
		// 缩放比，只用高或者宽其中一个数据进行计算即可
		int be = 1;// be=1表示不缩放
		if (w > h && w > ww) {// 如果宽度大的话根据宽度固定大小缩放
			be = (int) (newOpts.outWidth / ww);
		} else if (w < h && h > hh) {// 如果高度高的话根据宽度固定大小缩放
			be = (int) (newOpts.outHeight / hh);
		}
		if (be <= 0)
			be = 1;
		newOpts.inSampleSize = be;// 设置缩放比例
		// 重新读入图片，注意此时已经把options.inJustDecodeBounds 设回false了
		bitmap = compressImageyang(BitmapFactory.decodeFile(srcPath, newOpts),
				Img);
		bitmap = getBitmapRotate(bitmap, srcPath);
		newPath = Environment.getExternalStorageDirectory().getAbsolutePath()
				+ "/Download/cache_files/" + newPath;

		try {
			fos = new FileOutputStream(newPath);
			bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fos);
			fos.flush();
			fos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new File(newPath);// 压缩好比例大小后再进行质量压缩
	}

	/**
	 * 压缩图片质量
	 * 
	 * @param path
	 * @return
	 * @throws IOException
	 */
	public static Bitmap compressImageyang(Bitmap image, String Img) {
		boolean sizeFlag = false;
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		image.compress(Bitmap.CompressFormat.JPEG, 100, baos);// 质量压缩方法，这里100表示不压缩，把压缩后的数据存放到baos中
		int options = 100;
		if (Img.equals("dan")) {
			while (baos.toByteArray().length / 1024 > 300) { // 循环判断如果压缩后图片是否大于300kb,大于继续压缩
				sizeFlag = true;
				baos.reset();// 重置baos即清空baos
				image.compress(Bitmap.CompressFormat.JPEG, options, baos);// 这里压缩options%，把压缩后的数据存放到baos中
				options -= 10;// 每次都减少10
			}
		} else {
			while (baos.toByteArray().length / 1024 > 100) { // 循环判断如果压缩后图片是否大于100kb,大于继续压缩
				sizeFlag = true;
				baos.reset();// 重置baos即清空baos
				image.compress(Bitmap.CompressFormat.JPEG, options, baos);// 这里压缩options%，把压缩后的数据存放到baos中
				options -= 10;// 每次都减少10
			}
		}
		if (sizeFlag) {
			ByteArrayInputStream isBm = new ByteArrayInputStream(
					baos.toByteArray());// 把压缩后的数据baos存放到ByteArrayInputStream中
			image = BitmapFactory.decodeStream(isBm, null, null);// 把ByteArrayInputStream数据生成图片
		}

		return image;
	}

	// 图片旋转
	public static Bitmap getBitmapRotate(Bitmap bitmap, String path) {
		Matrix matrix = new Matrix();
		float angle;
		int fa = 0;
		angle = readPictureDegree(path);
		matrix.postRotate(angle);
		if (angle != 0) {
			bitmap = Bitmap.createBitmap(bitmap, fa, 0, bitmap.getWidth(),
					bitmap.getHeight(), matrix, true);
		}

		return bitmap;
	}
}
