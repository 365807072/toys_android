package com.yyqq.code.toyslease;

import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Random;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;
import org.xmlpull.v1.XmlPullParser;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.util.Log;
import android.util.Xml;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import com.ab.http.AbHttpUtil;
import com.ab.http.AbRequestParams;
import com.ab.http.AbStringHttpResponseListener;
import com.alipay.sdk.app.PayTask;
import com.tencent.mm.sdk.modelpay.PayReq;
import com.tencent.mm.sdk.openapi.IWXAPI;
import com.tencent.mm.sdk.openapi.WXAPIFactory;
import com.umeng.analytics.MobclickAgent;
import com.yyqq.babyshow.R;
import com.yyqq.code.login.WebLoginActivity;
import com.yyqq.code.main.GoodLife;
import com.yyqq.commen.adapter.ToysLeaseOrderInfoAdapter;
import com.yyqq.commen.model.OrderItem;
import com.yyqq.commen.model.PayResult;
import com.yyqq.commen.model.ToysLeaseOrderInfoBean;
import com.yyqq.commen.utils.Config;
import com.yyqq.commen.utils.MD5;
import com.yyqq.commen.utils.SignUtils;
import com.yyqq.commen.utils.Util;
import com.yyqq.commen.view.MyListView;
import com.yyqq.commen.view.RecodeListView;
import com.yyqq.commen.view.SelectDeliveryView;
import com.yyqq.commen.view.SelectTimeView;
import com.yyqq.framework.activity.BaseActivity;
import com.yyqq.framework.application.Constants;
import com.yyqq.framework.application.MyApplication;
import com.yyqq.framework.application.ServerMutualConfig;

/**
 * 玩具世界-确认支付
 * */
public class ToysLeasePayConfirmActivity extends BaseActivity {

	public static String payFrom = "";
	private TextView lease_order_monery;
	private ImageView sel_pay1;
	private ImageView sel_pay2;
	private Button pay_bt;
	private RecodeListView lease_order_list;
	private ScrollView lease_order_sc;
	private SelectTimeView lease_order_select;
	private RelativeLayout lease_order_time_select;
	private SelectDeliveryView lease_delivery_select;
	private RelativeLayout lease_order_delivery_select;
	private RelativeLayout lease_pay_all;
	private ImageView lease_pay_type_hint;
	private LinearLayout cart_ntf;
	private TextView toys_pay_hint_text;
	private MyListView lease_toys_list;
	
	public static String TOYS_ORDER_KEY = "toys_order_key";
	private AbHttpUtil ab;
	private LayoutInflater inflater;
	public static String order_id = "";
	private String min = "";
	private String max = "";
	private ArrayList<String> zuqiList;
	private ArrayList<String> songhuoList;
	private int timeIndex = 0;
	private int songhuoIndex = 0;
	private boolean isPayPost = true;
	private int payNumber = 0; // 记录是否点击支付过
	public static ToysLeasePayConfirmActivity toysLeasePayActivity = null;
	
	// 商户PID
	public static final String PARTNER = "2088612306229230";
	// 商户收款账号
	public static final String SELLER = "service@baobaoshowshow.com";
	// 商户私钥，pkcs8格式
	public static final String RSA_PRIVATE = "MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAK5PB2Qm1NddxKH9/2qUlE0H7Z2h6gaJsQ1QQQAv/lpp/peAlRnzLLkNYkTgNQZh3pYSQeAgSdXcEcUJVguYaihDAhSHFX5jeHqjpu9dODEV6cdRtu9mukoKE8cc/y7CXJqQWn/h7WNyse7+4f5S0GAJMGnGkoq7UckslpBZVBQjAgMBAAECgYBcuPFnlzh1cA3fViv+WBcjeuothinlXG1wdZZ+MQmOsv+ZO+8UpMTPk40IsnPCd2FeV0vvm31rY+uX8sVw2Zzt+Oa6ASJymMEgAw2iv29sillKDpK2XACwN5XSPXOACdXtzEerl6z5pzeGb8uhW2DB5V//0nf1hWbYw07s1PO2kQJBAN2rdyAYVydA9PWV7TuBYnX+a8BIohb/qoR3tvUaJo1HszYwkITyt6CDoaGE7/v5/XrM+lca3lrINmJXRtnYczUCQQDJTdciyBQLvSYZWo9Gi+h5fHFC0rxozkll/UYxVwhBnAWiWgyBh5fFxt4tqUy8Egv6e06FA57xlA7vBkIrmrz3AkA/TsIV4324kz+ih/AZ54jURBZH8zZ/tQLhFEOnWpGaFdkj59jOb3dsG0vlEk9rumjfUn1ItT691KJbkauFeeDlAkEAqwMIv9CPTwWqJyHK09ipbwNryKP0UWjl69HFXsccCXi9RJYRR7zkD62JM+s+eAswx+MW6mMQFRR9t0tuzVJQMwJAW3Cz2oMxelV53Zyn1K5cIMPC+7oM2qUGxoiiFlc27WTAIhosPSFMM9iGZxGBBPhSE//R889fMEdG65Xfi7lYIw==";
	// 支付宝公钥
	public static final String RSA_PUBLIC = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCnxj/9qwVfgoUh/y2W89L6BkRAFljhNhgPdyPuBV64bfQNN1PjbCzkIM6qRdKBoLPXmKKMiFYnkd6rAoprih3/PrQEB/VsW8OoM8fxn67UDYuyBTqA23MML9q1+ilIZwBC2AQ2UBVOrFXfFl75p6/B5KsiNG9zpgmLCUYuLkxpLQIDAQAB";
	private static final int SDK_PAY_FLAG = 1;
	private static final int SDK_CHECK_FLAG = 2;
	// 是否是第首次进入此页面
	public static int isOnrsum = 0;
	// 是否成功获取订单状态
	public static boolean isSuccess = false;
	
	private PayReq req;
	private IWXAPI msgApi;
	private Map<String, String> resultunifiedorder;
	private int randomNum;
	private String isSel = "1";
	private OrderItem item;
	private String myPrice = ""; // 最终提交价格
	private String pay_name = "";
	private String pay_total_price = "";
	private boolean isWZPay = true; // 是否需要微信/支付宝支付
	private boolean isPayCheck = false; // 是否是支付前检查玩具是否可租
	
	// 使用账户余额
	private RelativeLayout pay_packet;
	private TextView account_hint_text;
	private Button packet_pay;
	private String source = "0";
	private String is_balance = "0";
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_toys_lease_pay);
	}
	
	@Override
	protected void initView() {
		lease_toys_list = (MyListView) findViewById(R.id.lease_toys_list);
		cart_ntf = (LinearLayout) findViewById(R.id.cart_ntf);
		toys_pay_hint_text = (TextView) findViewById(R.id.toys_pay_hint_text);
		lease_delivery_select = (SelectDeliveryView) findViewById(R.id.lease_delivery_select);
		lease_order_delivery_select = (RelativeLayout) findViewById(R.id.lease_order_delivery_select);
		packet_pay = (Button) findViewById(R.id.packet_pay);
		account_hint_text = (TextView) findViewById(R.id.account_hint_text);
		pay_packet = (RelativeLayout) findViewById(R.id.pay_packet);
		lease_pay_all = (RelativeLayout) findViewById(R.id.lease_pay_all);
		lease_pay_type_hint = (ImageView) findViewById(R.id.lease_pay_type_hint);
		lease_order_time_select = (RelativeLayout) findViewById(R.id.lease_order_time_select);
		lease_order_select = (SelectTimeView) findViewById(R.id.lease_order_select);
		sel_pay1 = (ImageView) findViewById(R.id.sel_pay1);
		sel_pay2 = (ImageView) findViewById(R.id.sel_pay2);
		pay_bt = (Button) findViewById(R.id.pay_bt);
		lease_order_list = (RecodeListView) findViewById(R.id.lease_order_list);
		lease_order_sc = (ScrollView) findViewById(R.id.lease_order_sc);
		lease_order_list.setFocusable(false); // 消除listview焦点
		lease_order_sc.smoothScrollTo(0,20); // scrollView置顶
		lease_order_sc.requestFocus();
	}

	@Override
	protected void initData() {
		toysLeasePayActivity = this;
		payNumber = 0;
		item = new OrderItem();
		msgApi = WXAPIFactory.createWXAPI(ToysLeasePayConfirmActivity.this, null);
		// 将该app注册到微信
		msgApi.registerApp(Constants.APP_ID);
		req = new PayReq();
		randomNum = (int) (Math.random() * 100);
		GoodLife.getWechatApiKey(ab);
		isOnrsum = 0; // 首次进入清零累计展示次数
		SelectTimeView view = new SelectTimeView(ToysLeasePayConfirmActivity.this);
		ab = AbHttpUtil.getInstance(ToysLeasePayConfirmActivity.this);
		inflater = LayoutInflater.from(ToysLeasePayConfirmActivity.this);
		
		// 隐藏软键盘
		lease_order_sc.requestFocus();
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		MobclickAgent.onResume(this);
		
//		// 隐藏软键盘
//		lease_order_sc.requestFocus();
//		
//		// 检查玩具是否已经被锁定
//		if(!MyApplication.getVisitor().equals("0")  || Config.getUser(ToysLeasePayConfirmActivity.this).uid.equals("")){
//			Intent in = new Intent(ToysLeasePayConfirmActivity.this, WebLoginActivity.class);
//			startActivity(in);
//		}else{
//			if(payNumber == 0){
//				checkToysType(); // 首次进入支付页面需要检查此玩具是否已经被其他用户锁定了
//			}else{
//				checkOrderType(item.order_id, false); // 非首次进入支付页面，检查订单是否成功支付
//			}
//		}
	}
	
	@Override
	protected void onPause() {
		super.onPause();
		MobclickAgent.onResume(this);
	}

	@Override
	protected void setListener() {
		
//		lease_order_songhuo.setOnClickListener(new OnClickListener() {
//			
//			@Override
//			public void onClick(View v) {
//				lease_order_delivery_select.setVisibility(View.VISIBLE);
//				songhuoList = new ArrayList<String>();
//				songhuoList.add("yi");
//				songhuoList.add("yi1");
//				songhuoList.add("yi2");
//				songhuoList.add("yi");
//				songhuoList.add("yi3");
//				songhuoList.add("yi");
//				songhuoList.add("yi");
//				songhuoList.add("yi4");
//				songhuoList.add("yi");
//				songhuoList.add("yi5");
//				lease_delivery_select.lists(songhuoList).fontSize(35).showCount(7).selectTip("天").select(0).listener(new SelectDeliveryView.OnSelectTimeViewItemSelectListener() {
//				
//					@Override
//					public void onItemSelect(int index) {
//						songhuoIndex = index;
//					}
//				}).build();
//			}
//		});
		
		lease_order_delivery_select.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				lease_order_delivery_select.setVisibility(View.GONE);
			}
		});
		
		packet_pay.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				source = "1";
				if(is_balance.equals("0")){
					is_balance = "1";
				}else{
					is_balance = "0";
				}
				changeTime();
			}
		});
		
		sel_pay1.setOnClickListener(payClick1);
		sel_pay2.setOnClickListener(payClick2);
		
		findViewById(R.id.lease_back).setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				ToysLeasePayConfirmActivity.this.finish();
			}
		});
		
		lease_order_time_select.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				lease_order_time_select.setVisibility(View.GONE);
			}
		});
		
		pay_bt.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if(!MyApplication.getVisitor().equals("0")  || Config.getUser(ToysLeasePayConfirmActivity.this).uid.equals("")){
					Intent in = new Intent(ToysLeasePayConfirmActivity.this, WebLoginActivity.class);
					startActivity(in);
				}else{
					isPayCheck = true;
					checkToysType();
				}
			}
		});
	}
	
	/**
	 * 支付宝支付按钮
	 */
	public View.OnClickListener payClick1 = new OnClickListener() {

		@Override
		public void onClick(View arg0) {
			isSel = "1";
			sel_pay1.setBackgroundResource(R.drawable.sel_bt);
			sel_pay2.setBackgroundResource(R.drawable.sel_bt_no);
		}
	};
	
	/**
	 * 微信支付按钮
	 */
	public View.OnClickListener payClick2 = new OnClickListener() {

		@Override
		public void onClick(View arg0) {
			isSel = "2";
			sel_pay1.setBackgroundResource(R.drawable.sel_bt_no);
			sel_pay2.setBackgroundResource(R.drawable.sel_bt);
		}
	};
	
	
	/**
	 * 修改租期
	 * */
	private void changeTime(){
		isPayPost = false;
		Config.showProgressDialog(ToysLeasePayConfirmActivity.this, false, null);
		final AbRequestParams params = new AbRequestParams();
		params.put("login_user_id", Config.getUser(ToysLeasePayConfirmActivity.this).uid);
		params.put("business_id", getIntent().getStringExtra(TOYS_ORDER_KEY));
		params.put("order_id", order_id);
		params.put("rent_day", zuqiList.get(timeIndex));
		params.put("source", source);
		params.put("is_balance", is_balance);
		ab.get(ServerMutualConfig.EDIT_LEASE_TIME + "&" + params.toString(),new AbStringHttpResponseListener() {
			@Override
			public void onSuccess(int statusCode, String content) {
				super.onSuccess(statusCode, content);
				Config.dismissProgress();
				try {
					if(!content.isEmpty() && new JSONObject(content).getBoolean("success")){
						
						// 是否使用余额
						if(new JSONObject(content).getJSONObject("data").getString("is_balance").equals("1")){
							packet_pay.setBackgroundResource(R.drawable.sel_bt);
							is_balance = "1";
						}else{
							packet_pay.setBackgroundResource(R.drawable.sel_bt_no);
							is_balance = "0";
						}
						
						order_id = new JSONObject(content).getJSONObject("data").getString("order_id");
						myPrice = new JSONObject(content).getJSONObject("data").getString("pay_total_price");
						ArrayList<ToysLeaseOrderInfoBean> bodyList = new ArrayList<ToysLeaseOrderInfoBean>();
						ToysLeaseOrderInfoBean bean = null;
						for(int i = 0 ; i < new JSONObject(content).getJSONObject("data").getJSONArray("price").length() ; i++){
							bean = new ToysLeaseOrderInfoBean();
							bean.setHint(new JSONObject(content).getJSONObject("data").getJSONArray("price").getJSONObject(i).getString("price_title"));
							bean.setNumber(new JSONObject(content).getJSONObject("data").getJSONArray("price").getJSONObject(i).getString("sell_price"));
							bodyList.add(bean);
						}
						ToysLeaseOrderInfoAdapter adapter = new ToysLeaseOrderInfoAdapter(ToysLeasePayConfirmActivity.this, inflater, bodyList);
						lease_order_list.setAdapter(adapter);
				        if(new JSONObject(content).getJSONObject("data").getString("is_payment").equals("1")){
							isWZPay = true;
						}else{
							isWZPay = false;
						}
				        
				        isPayPost = true;
					}else{
						Toast.makeText(ToysLeasePayConfirmActivity.this, new JSONObject(content).getString("reMsg"), 2).show();
						isPayPost = false;
					}
				} catch (JSONException e) {
					e.printStackTrace();
					Toast.makeText(ToysLeasePayConfirmActivity.this, "未能成功修改！", 2).show();
					isPayPost = false;
				}
			}
			
			@Override
			public void onFinish() {
				super.onFinish();
				Config.dismissProgress();
			}
			
			@Override
			public void onFailure(int statusCode, String content,
					Throwable error) {
				super.onFailure(statusCode, content, error);
			}
		});
	}
	
	
	/**
	 * 获取玩具详情
	 * */
	private void initLeaseInfo(){
		
		isPayPost = false;
		
		Config.showProgressDialog(ToysLeasePayConfirmActivity.this, false, null);
		final AbRequestParams params = new AbRequestParams();
		params.put("login_user_id", Config.getUser(ToysLeasePayConfirmActivity.this).uid);
		params.put("business_id", getIntent().getStringExtra(TOYS_ORDER_KEY));
		ab.get(ServerMutualConfig.GET_ORDER_INFO + "&" + params.toString(),new AbStringHttpResponseListener() {
			@Override
			public void onSuccess(int statusCode, String content) {
				super.onSuccess(statusCode, content);
				Config.dismissProgress();
				try {
					if(!content.isEmpty() && new JSONObject(content).getBoolean("success")){
						JSONObject json = new JSONObject(content);
						
//						ArrayList<ToysLeasePayListBean> listData = new ArrayList<ToysLeasePayListBean>();
//						ToysLeasePayListAdapter listAdapter = new ToysLeasePayListAdapter(ToysLeasePayActivity.this, inflater, listData);
//						lease_toys_list.setAdapter(listAdapter);
						
						// 是否显示账户余额
						if(json.getJSONObject("data").getString("show_balance").equals("0")){
							pay_packet.setVisibility(View.GONE);
						}else{
							pay_packet.setVisibility(View.VISIBLE);
							account_hint_text.setText(json.getJSONObject("data").getString("balance_info"));
						}
						
						// 是否使用余额
						if(json.getJSONObject("data").getString("is_balance").equals("1")){
							packet_pay.setBackgroundResource(R.drawable.sel_bt);
							is_balance = "1";
						}else{
							packet_pay.setBackgroundResource(R.drawable.sel_bt_no);
							is_balance = "0";
						}
						
						order_id = json.getJSONObject("data").getString("order_id");
						item.order_id = order_id;
						myPrice = new JSONObject(content).getJSONObject("data").getString("pay_total_price");
						ArrayList<ToysLeaseOrderInfoBean> bodyList = new ArrayList<ToysLeaseOrderInfoBean>();
						ToysLeaseOrderInfoBean bean = null;
						for(int i = 0 ; i < new JSONObject(content).getJSONObject("data").getJSONArray("price").length() ; i++){
							bean = new ToysLeaseOrderInfoBean();
							bean.setHint(new JSONObject(content).getJSONObject("data").getJSONArray("price").getJSONObject(i).getString("price_title"));
							bean.setNumber(new JSONObject(content).getJSONObject("data").getJSONArray("price").getJSONObject(i).getString("sell_price"));
							bodyList.add(bean);
						}
						ToysLeaseOrderInfoAdapter adapter = new ToysLeaseOrderInfoAdapter(ToysLeasePayConfirmActivity.this, inflater, bodyList);
						lease_order_list.setAdapter(adapter);
						lease_order_monery.setText(new JSONObject(content).getJSONObject("data").getString("every_sell_price"));
						pay_name = new JSONObject(content).getJSONObject("data").getString("business_title");
						
						// 租期选择
						min = new JSONObject(content).getJSONObject("data").getString("rent_day");
						max = new JSONObject(content).getJSONObject("data").getString("more_rent_day");
						if(!min.trim().isEmpty() && !max.trim().isEmpty()){
							if(Integer.parseInt(min) != Integer.parseInt(max)){
								zuqiList = new ArrayList<String>();
								for(int i = Integer.parseInt(min) ; i <= Integer.parseInt(max) ; i++ ){
									zuqiList.add(i+"");
								}
								lease_order_select.lists(zuqiList).fontSize(35).showCount(7).selectTip("天").select(0).listener(new SelectTimeView.OnSelectTimeViewItemSelectListener() {
									
									@Override
									public void onItemSelect(int index) {
										songhuoIndex = index;
									}
								}).build();
								
							}
						}
						
						
						if(new JSONObject(content).getJSONObject("data").getString("is_payment").equals("1")){
							isWZPay = true;
						}else{
							isWZPay = false;
						}
				        
				        isPayPost = true;
					}else{
						Toast.makeText(ToysLeasePayConfirmActivity.this, new JSONObject(content).getString("reMsg"), 2).show();
						isPayPost = false;
					}
				} catch (JSONException e) {
					e.printStackTrace();
					Toast.makeText(ToysLeasePayConfirmActivity.this, "未能成功修改！", 2).show();
					isPayPost = false;
				}
			}
			
			@Override
			public void onFinish() {
				super.onFinish();
				Config.dismissProgress();
			}
			
			@Override
			public void onFailure(int statusCode, String content,
					Throwable error) {
				super.onFailure(statusCode, content, error);
			}
		});
	}

	/**
	 * 支付宝回调
	 */
	private Handler mHandler = new Handler() {
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case SDK_PAY_FLAG: {
				PayResult payResult = new PayResult((String) msg.obj);

				// 支付宝返回此次支付结果及加签，建议对支付宝签名信息拿签约时支付宝提供的公钥做验签
				String resultInfo = payResult.getResult();

				String resultStatus = payResult.getResultStatus();

				// 判断resultStatus 为“9000”则代表支付成功，具体状态码代表含义可参考接口文档
				if (TextUtils.equals(resultStatus, "9000")) {
					Toast.makeText(ToysLeasePayConfirmActivity.this, "支付成功", Toast.LENGTH_SHORT).show();
					
					if(null != ToysLeaseMainAllActivity.toysLeaseMainActivity){
						ToysLeaseMainAllActivity.toysLeaseMainActivity.finish();
					}
					
					if(null != ToysLeaseTestActivity.toysLeaseMainTextActivity){
						ToysLeaseTestActivity.toysLeaseMainTextActivity.finish();
					}
					
					if(null != ToysLeaseDetailActivity.toysLeaseDetailActivity){
						ToysLeaseDetailActivity.toysLeaseDetailActivity.finish();
					}
					
					if(null != ToysLeaseOrderDetailActivity.toysLeaseOrderDetailActivity){
						ToysLeaseOrderDetailActivity.toysLeaseOrderDetailActivity.finish();
					}
					
					if(null != ToysLeaseMainTabActivity.toysLeaseMainTabActivity){
						ToysLeaseMainTabActivity.toysLeaseMainTabActivity.finish();
					}
					
					Intent intent = new Intent(ToysLeasePayConfirmActivity.this, ToysLeaseMainTabActivity.class);
					intent.putExtra("order_id", order_id);
					startActivity(intent);
					ToysLeasePayConfirmActivity.this.finish();
				} else {
					// 判断resultStatus 为非“9000”则代表可能支付失败
					// “8000”代表支付结果因为支付渠道原因或者系统原因还在等待支付结果确认，最终交易是否成功以服务端异步通知为准（小概率状态）
					if (TextUtils.equals(resultStatus, "8000")) {
						Toast.makeText(ToysLeasePayConfirmActivity.this, "支付结果确认中", Toast.LENGTH_SHORT).show();
					} else {
						// 其他值就可以判断为支付失败，包括用户主动取消支付，或者系统返回的错误
						Toast.makeText(ToysLeasePayConfirmActivity.this, "支付失败", Toast.LENGTH_SHORT).show();
//						pay_bt.setClickable(true);
					}
				}
				break;
			}
			case SDK_CHECK_FLAG: {
				Toast.makeText(ToysLeasePayConfirmActivity.this, "检查结果为：" + msg.obj, Toast.LENGTH_SHORT).show();
				break;
			}
			default:
				break;
			}
		};
	};
	
	private String genAppSign(List<NameValuePair> params) {
		StringBuilder sb = new StringBuilder();

		for (int i = 0; i < params.size(); i++) {
			sb.append(params.get(i).getName());
			sb.append('=');
			sb.append(params.get(i).getValue());
			sb.append('&');
		}
		sb.append("key=");
		sb.append(Constants.API_KEY);

		// this.sb.append("sign str\n"+sb.toString()+"\n\n");
		String appSign = MD5.getMessageDigest(sb.toString().getBytes())
				.toUpperCase();
		// Log.e("orion", appSign);
		return appSign;
	}
	
	// 支付宝
	/**
	 * create the order info. 创建订单信息
	 * 
	 */
	public String getOrderInfo(String subject, String body, String price) {

		// 签约合作者身份ID
		String orderInfo = "partner=" + "\"" + PARTNER + "\"";

		// 签约卖家支付宝账号
		orderInfo += "&seller_id=" + "\"" + SELLER + "\"";

		// 商户网站唯一订单号
		// orderInfo += "&out_trade_no=" + "\"" + getOutTradeNo() + "\"";
		orderInfo += "&out_trade_no=" + "\"" + item.order_id + "c3\"";

		// 商品名称
		orderInfo += "&subject=" + "\"" + subject + "\"";

		// 商品详情
		orderInfo += "&body=" + "\"" + body + "\"";

		// 商品金额
		orderInfo += "&total_fee=" + "\"" + myPrice + "\"";

		// 服务器异步通知页面路径
		/**
		 * 正式环境
		 */
		orderInfo += "&notify_url=" + "\""
				+ "http://checkpic.baobaoshowshow.com/Pay1/notifyurlorder"
				+ "\"";
		/**
		 * v17
		 */
		// orderInfo += "&notify_url=" + "\""
		// + "http://checkpic.baobaoshowshow.com/Pay1/notifyurlorder2"
		// + "\"";

		// 服务接口名称， 固定值
		orderInfo += "&service=\"mobile.securitypay.pay\"";

		// 支付类型， 固定值
		orderInfo += "&payment_type=\"1\"";

		// 参数编码， 固定值
		orderInfo += "&_input_charset=\"utf-8\"";

		// 设置未付款交易的超时时间
		// 默认30分钟，一旦超时，该笔交易就会自动被关闭。
		// 取值范围：1m～15d。
		// m-分钟，h-小时，d-天，1c-当天（无论交易何时创建，都在0点关闭）。
		// 该参数数值不接受小数点，如1.5h，可转换为90m。
		orderInfo += "&it_b_pay=\"30m\"";

		// extern_token为经过快登授权获取到的alipay_open_id,带上此参数用户将使用授权的账户进行支付
		// orderInfo += "&extern_token=" + "\"" + extern_token + "\"";

		// 支付宝处理完请求后，当前页面跳转到商户指定页面的路径，可空
		orderInfo += "&return_url=\"m.alipay.com\"";

		// 调用银行卡支付，需配置此参数，参与签名， 固定值 （需要签约《无线银行卡快捷支付》才能使用）
		// orderInfo += "&paymethod=\"expressGateway\"";

		return orderInfo;
	}
	/**
	 * get the out_trade_no for an order. 生成商户订单号，该值在商户端应保持唯一（可自定义格式规范）
	 * 
	 */
	public String getOutTradeNo() {
		SimpleDateFormat format = new SimpleDateFormat("MMddHHmmss",
				Locale.getDefault());
		Date date = new Date();
		String key = format.format(date);

		Random r = new Random();
		key = key + r.nextInt();
		key = key.substring(0, 15);
		return key;
	}

	/**
	 * sign the order info. 对订单信息进行签名
	 * 
	 * @param content
	 *            待签名订单信息
	 */
	public String sign(String content) {
		return SignUtils.sign(content, RSA_PRIVATE);
	}

	/**
	 * get the sign type we use. 获取签名方式
	 * 
	 */
	public String getSignType() {
		return "sign_type=\"RSA\"";
	}

	// 微信
	private String genNonceStr() {
		Random random = new Random();
		return MD5.getMessageDigest(String.valueOf(random.nextInt(10000))
				.getBytes());
	}

	private long genTimeStamp() {
		return System.currentTimeMillis() / 1000;
	}

	private void winxinpay() {
		GetPrepayIdTask getPrepayId = new GetPrepayIdTask();
		getPrepayId.execute();
	}

	private void genPayReq() {
		// 调起微信支付的关键代码
		req.appId = Constants.APP_ID;
		req.partnerId = Constants.MCH_ID;
		req.prepayId = resultunifiedorder.get("prepay_id");
		req.packageValue = "Sign=WXPay";
		req.nonceStr = genNonceStr();
		req.timeStamp = String.valueOf(genTimeStamp());

		List<NameValuePair> signParams = new LinkedList<NameValuePair>();
		signParams.add(new BasicNameValuePair("appid", req.appId));
		signParams.add(new BasicNameValuePair("noncestr", req.nonceStr));
		signParams.add(new BasicNameValuePair("package", req.packageValue));
		signParams.add(new BasicNameValuePair("partnerid", req.partnerId));
		signParams.add(new BasicNameValuePair("prepayid", req.prepayId));
		signParams.add(new BasicNameValuePair("timestamp", req.timeStamp));
		req.sign = genAppSign(signParams); // 签名
		// sb.append("sign\n"+req.sign+"\n\n");
		sendPayReq();
	}

	// 微信支付第一步
	private class GetPrepayIdTask extends
			AsyncTask<Void, Void, Map<String, String>> {

		private ProgressDialog dialog;

		@Override
		protected void onPreExecute() {

		}

		@Override
		protected void onPostExecute(Map<String, String> result) {
			if (dialog != null) {
				dialog.dismiss();
			}
			Config.dismissProgress();
			// sb.append("prepay_id\n"+result.get("prepay_id")+"\n\n");
			// android.util.Log.v("fff", "di yi bu  :"+sb.toString());

			resultunifiedorder = result;
			genPayReq();
		}

		@Override
		protected void onCancelled() {
			super.onCancelled();
			Config.dismissProgress();
		}

		@Override
		protected Map<String, String> doInBackground(Void... params) {

			String url = String
					.format("https://api.mch.weixin.qq.com/pay/unifiedorder");
			String entity = genProductArgs();

			// Log.e("fanfan_orion", entity);

			byte[] buf = Util.httpPost(url, entity);

			String content = new String(buf);
			// Log.e("fanfan_orion", content);
			Map<String, String> xml = decodeXml(content);

			return xml;
		}
	}

	// 微信支付第三步
	private void sendPayReq() {
		Constants.order_id = item.order_id;
		Constants.price = myPrice;
		msgApi.registerApp(Constants.APP_ID);
		msgApi.sendReq(req);
	}

	//
	private String genProductArgs() {
		StringBuffer xml = new StringBuffer();

		try {
			String nonceStr = genNonceStr();
			xml.append("</xml>");
			List<NameValuePair> packageParams = new LinkedList<NameValuePair>();
			packageParams
					.add(new BasicNameValuePair("appid", Constants.APP_ID));
			packageParams.add(new BasicNameValuePair("body", pay_name));
			packageParams
					.add(new BasicNameValuePair("mch_id", Constants.MCH_ID));
			packageParams.add(new BasicNameValuePair("nonce_str", nonceStr));
			/**
			 * 正式环境
			 */
			packageParams.add(new BasicNameValuePair("notify_url",
					"http://checkpic.baobaoshowshow.com/Wxpay/notifyurl"));
			packageParams.add(new BasicNameValuePair("out_trade_no", item.order_id + "a" + randomNum+ "c3"));
			/**
			 * v17
			 */
			// packageParams
			// .add(new BasicNameValuePair("notify_url",
			// "http://checkpic.baobaoshowshow.com/Wxpay/notifyurlorder2"));
			//
			// packageParams.add(new BasicNameValuePair("out_trade_no",
			// item.order_id + "a" + randomNum + "b2"));

			packageParams.add(new BasicNameValuePair("spbill_create_ip",
					"127.0.0.1"));
			double price = Double.valueOf(myPrice);
			long price1 = (long) (price * 100);
			packageParams.add(new BasicNameValuePair("total_fee", price1 + ""));
			packageParams.add(new BasicNameValuePair("trade_type", "APP"));

			String sign = genPackageSign(packageParams);
			packageParams.add(new BasicNameValuePair("sign", sign));

			String xmlstring = toXml(packageParams);
			return new String(xmlstring.toString().getBytes(), "ISO8859-1");

		} catch (Exception e) {
//			Log.e(TAG, "genProductArgs fail, ex = " + e.getMessage());
			return null;
		}

	}

	private String toXml(List<NameValuePair> params) {
		StringBuilder sb = new StringBuilder();
		sb.append("<xml>");
		for (int i = 0; i < params.size(); i++) {
			sb.append("<" + params.get(i).getName() + ">");

			sb.append(params.get(i).getValue());
			sb.append("</" + params.get(i).getName() + ">");
		}
		sb.append("</xml>");

		// Log.e("orion", sb.toString());
		return sb.toString();
	}

	/**
	 * 生成签名
	 */

	private String genPackageSign(List<NameValuePair> params) {
		StringBuilder sb = new StringBuilder();

		for (int i = 0; i < params.size(); i++) {
			sb.append(params.get(i).getName());
			sb.append('=');
			sb.append(params.get(i).getValue());
			sb.append('&');
		}
		sb.append("key=");
		sb.append(Constants.API_KEY);

		String packageSign = MD5.getMessageDigest(sb.toString().getBytes())
				.toUpperCase();
		// Log.e("orion", packageSign);
		return packageSign;
	}

	private String genOutTradNo() {
		Random random = new Random();
		return MD5.getMessageDigest(String.valueOf(random.nextInt(10000))
				.getBytes());
	}

	public Map<String, String> decodeXml(String content) {

		try {
			Map<String, String> xml = new HashMap<String, String>();
			XmlPullParser parser = Xml.newPullParser();
			parser.setInput(new StringReader(content));
			int event = parser.getEventType();
			while (event != XmlPullParser.END_DOCUMENT) {

				String nodeName = parser.getName();
				switch (event) {
				case XmlPullParser.START_DOCUMENT:

					break;
				case XmlPullParser.START_TAG:

					if ("xml".equals(nodeName) == false) {
						// 实例化student对象
						xml.put(nodeName, parser.nextText());
					}
					break;
				case XmlPullParser.END_TAG:
					break;
				}
				event = parser.next();
			}

			return xml;
		} catch (Exception e) {
			Log.e("orion", e.toString());
		}
		return null;

	}
	
	/**
	 * 检查订单状态
	 * */
	private void checkOrderType(String orderId, final boolean toPay) {
//		pay_bt.setClickable(false);
		Config.showProgressDialog(ToysLeasePayConfirmActivity.this, false, null);
		AbHttpUtil abhttp = AbHttpUtil.getInstance(ToysLeasePayConfirmActivity.this);
		final AbRequestParams params = new AbRequestParams();
		params.put("login_user_id", Config.getUser(ToysLeasePayConfirmActivity.this).uid);
		params.put("order_id", orderId);
		abhttp.get(ServerMutualConfig.CHECK_TOYS_ORDER_TYPE + "&" + params.toString(), new AbStringHttpResponseListener() {
			
					@Override
					public void onSuccess(int statusCode, String content) {
						Config.dismissProgress();
						try {
							JSONObject json = new JSONObject(content);
							if (json.getBoolean("success")) {
								isSuccess = true;
								if (json.getJSONObject("data").getString("is_pay").equals("1")) { // 订单未支付
//									pay_bt.setClickable(true);
									if (toPay) {
										pay();
									}
								} else { // 其他状态直接进入订单详情页
									if("1".equals(isSel)){ // 使用支付宝支付成功后，回调内已设置跳转，故此处不做任何操作
										
									}else{

										if(null != ToysLeaseOrderDetailActivity.toysLeaseOrderDetailActivity){
											ToysLeaseOrderDetailActivity.toysLeaseOrderDetailActivity.finish();
										}
										
										if(null != ToysLeaseMainAllActivity.toysLeaseMainActivity){
											ToysLeaseMainAllActivity.toysLeaseMainActivity.finish();
										}
										
										if(null != ToysLeaseTestActivity.toysLeaseMainTextActivity){
											ToysLeaseTestActivity.toysLeaseMainTextActivity.finish();
										}
										
										if(null != ToysLeaseDetailActivity.toysLeaseDetailActivity){
											ToysLeaseDetailActivity.toysLeaseDetailActivity.finish();
										}
										
										if(null != ToysLeaseMainTabActivity.toysLeaseMainTabActivity){
											ToysLeaseMainTabActivity.toysLeaseMainTabActivity.finish();
										}
										
										Toast.makeText(ToysLeasePayConfirmActivity.this, "此订单已完成支付", Toast.LENGTH_LONG).show();
										Intent intent = new Intent(ToysLeasePayConfirmActivity.this, ToysLeaseMainTabActivity.class);
										intent.putExtra("order_id", order_id);
										startActivity(intent);
										ToysLeasePayConfirmActivity.this.finish();
									}
								}
							} else {
								isSuccess = false;
							}
						} catch (JSONException e) {
							e.printStackTrace();
							isSuccess = false;
						}
					}

					@Override
					public void onFinish() {
						super.onFinish();
						Config.dismissProgress();
						isSuccess = false;
					}

					@Override
					public void onFailure(int statusCode, String content,
							Throwable error) {
						super.onFailure(statusCode, content, error);
						Config.dismissProgress();
						isSuccess = false;
					}
				});
	}

//	/**
//	 * 调起支付
//	 * */
//	@SuppressLint("NewApi")
//	private void submitAndPay() {
////		pay_bt.setClickable(false);
//		// 提交个人信息
//		Config.showProgressDialog(ToysLeasePayConfirmActivity.this, false, null);
//		final AbRequestParams params = new AbRequestParams();
//		params.put("login_user_id", Config.getUser(ToysLeasePayConfirmActivity.this).uid);
//		params.put("order_id", order_id);
//		params.put("user_name", lease_order_name.getText().toString().trim());
//		params.put("mobile", lease_order_phone.getText().toString().trim());
//		params.put("address", lease_order_address.getText().toString().trim());
//		params.put("addtext", lease_detail_addtext.getText().toString().trim());
//		ab.post(ServerMutualConfig.SUBMIT_USER_INFO , params, new AbStringHttpResponseListener() {
//			@Override
//			public void onSuccess(int statusCode, String content) {
//				super.onSuccess(statusCode, content);
//				Config.dismissProgress();
//				try {
//					if(!content.isEmpty() && new JSONObject(content).getBoolean("success")){
//						JSONObject json = new JSONObject(content);
//						item.order_id = order_id;
//						pay();
//					}else{
//						Toast.makeText(ToysLeasePayConfirmActivity.this, new JSONObject(content).getString("reMsg"), 2).show();
//					}
//				}catch (JSONException e) {
//					e.printStackTrace();
//					Toast.makeText(ToysLeasePayConfirmActivity.this, "未能成功修改！", 2).show();
////					pay_bt.setClickable(true);
//				}
//			}
//					
//					@Override
//					public void onFinish() {
//						super.onFinish();
//						Config.dismissProgress();
//					}
//					
//					@Override
//					public void onFailure(int statusCode, String content,
//							Throwable error) {
//						super.onFailure(statusCode, content, error);
//					}
//				});
//			}
	
	/**
	 * 支付
	 * */
	private void pay(){
		if(isWZPay){
			if (isOnrsum > 1 && !isSuccess) { // 如果非首次进入并且支付状态未能获取成功，就需要再次查询
				checkOrderType(item.order_id, true);
			} else {
				payNumber += 1;
				if ("1".equals(isSel)) {
					payFrom = "zhifubao";
					// 订单
					String orderInfo = getOrderInfo(pay_name, pay_name, myPrice);
					
					// 对订单做RSA 签名
					String sign = sign(orderInfo);
					try {
						// 仅需对sign 做URL编码
						sign = URLEncoder.encode(sign, "UTF-8");
					} catch (UnsupportedEncodingException e) {
						e.printStackTrace();
					}
					
					// 完整的符合支付宝参数规范的订单信息
					final String payInfo = orderInfo + "&sign=\"" + sign + "\"&" + getSignType();
					
					// android.util.Log.e("fanfan_orderInfo", orderInfo);
					// android.util.Log.e("fanfan_payInfo", payInfo);
					Runnable payRunnable = new Runnable() {
						
						@Override
						public void run() {
							// 构造PayTask 对象
							PayTask alipay = new PayTask(ToysLeasePayConfirmActivity.this);
							// 调用支付接口，获取支付结果
							String result = alipay.pay(payInfo);
							
							Message msg = new Message();
							msg.what = SDK_PAY_FLAG;
							msg.obj = result;
							mHandler.sendMessage(msg);
						}
					};
					// 必须异步调用
					Thread payThread = new Thread(payRunnable);
					payThread.start();
				} else if ("2".equals(isSel)) {
					if(!Constants.API_KEY.isEmpty()){
						payFrom = "weixin";
						Config.showProgressDialog(ToysLeasePayConfirmActivity.this, false, null);
						winxinpay();
					}else{
						GoodLife.getWechatApiKey(ab);
					}
				}
			}
		}else{
			Config.showProgressDialog(ToysLeasePayConfirmActivity.this, false, null);
			final AbRequestParams params = new AbRequestParams();
			params.put("login_user_id", Config.getUser(ToysLeasePayConfirmActivity.this).uid);
			params.put("price", myPrice);
			params.put("order_id", order_id);
			ab.get(ServerMutualConfig.PAY_TO_ORDER + "&" + params.toString(),new AbStringHttpResponseListener() {
				@Override
				public void onSuccess(int statusCode, String content) {
					super.onSuccess(statusCode, content);
					Config.dismissProgress();
					try {
						if(!content.isEmpty() && new JSONObject(content).getBoolean("success")){
							
							if(null != ToysLeaseMainAllActivity.toysLeaseMainActivity){
								ToysLeaseMainAllActivity.toysLeaseMainActivity.finish();
							}
							
							if(null != ToysLeaseTestActivity.toysLeaseMainTextActivity){
								ToysLeaseTestActivity.toysLeaseMainTextActivity.finish();
							}
							
							if(null != ToysLeaseDetailActivity.toysLeaseDetailActivity){
								ToysLeaseDetailActivity.toysLeaseDetailActivity.finish();
							}
							
							if(null != ToysLeaseOrderDetailActivity.toysLeaseOrderDetailActivity){
								ToysLeaseOrderDetailActivity.toysLeaseOrderDetailActivity.finish();
							}
							
							if(null != ToysLeaseMainTabActivity.toysLeaseMainTabActivity){
								ToysLeaseMainTabActivity.toysLeaseMainTabActivity.finish();
							}
							
							Intent intent = new Intent(ToysLeasePayConfirmActivity.this, ToysLeaseMainTabActivity.class);
							intent.putExtra("order_id", order_id);
							startActivity(intent);
							ToysLeasePayConfirmActivity.this.finish();
						}else{
							Toast.makeText(ToysLeasePayConfirmActivity.this, new JSONObject(content).getString("reMsg"), 2).show();
						}
					} catch (JSONException e) {
						e.printStackTrace();
						Toast.makeText(ToysLeasePayConfirmActivity.this, "未能成功修改！", 2).show();
					}
				}
				
				@Override
				public void onFinish() {
					super.onFinish();
					Config.dismissProgress();
				}
				
				@Override
				public void onFailure(int statusCode, String content,
						Throwable error) {
					super.onFailure(statusCode, content, error);
				}
			});
		}
	}
	
	/**
	 * 检查玩具是否可下单
	 * */
	private void checkToysType(){
		Config.showProgressDialog(ToysLeasePayConfirmActivity.this, false, null);
		final AbRequestParams params = new AbRequestParams();
		params.put("login_user_id", Config.getUser(ToysLeasePayConfirmActivity.this).uid);
		params.put("business_id", getIntent().getStringExtra(TOYS_ORDER_KEY));
		ab.get(ServerMutualConfig.CHECK_TOYS_TYPE + "&" + params.toString(), new AbStringHttpResponseListener() {
			
			@Override
			public void onSuccess(int statusCode, String content) {
				super.onSuccess(statusCode, content);
				Config.dismissProgress();
				try {
					if(!content.isEmpty() && new JSONObject(content).getBoolean("success")){
						if(new JSONObject(content).getJSONObject("data").getString("is_order").equals("0")){ // 待租
							if(isPayCheck){ // 支付前再次查询玩具状态，可租的话直接提交用户信息+付款
								isPayCheck = false;
								if(isPayPost){
//									submitAndPay();
								}else{
									Toast.makeText(ToysLeasePayConfirmActivity.this, "未能成功支付！请退出本页面再次重试", 3).show();
								}
							}else{ // 首次进入页面检查玩具是否可支付
								lease_pay_all.setVisibility(View.VISIBLE);
								lease_pay_type_hint.setVisibility(View.GONE);
								initLeaseInfo();
								InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
								imm.hideSoftInputFromWindow(getWindow().getDecorView().getWindowToken(), 0);
								isOnrsum += 1; // 修改本页面重新吊起次数
								if (isOnrsum > 1) {
									checkOrderType(item.order_id, false); // 检查订单状态
								}
							}
						}else{ // 已租
							Toast.makeText(ToysLeasePayConfirmActivity.this, "抱歉！此玩具已被其他人抢走了", 2).show();
							lease_pay_all.setVisibility(View.GONE);
							lease_pay_type_hint.setVisibility(View.VISIBLE);
						}
					}else{
						Toast.makeText(ToysLeasePayConfirmActivity.this, new JSONObject(content).getString("reMsg"), 2).show();
						lease_pay_all.setVisibility(View.GONE);
						lease_pay_type_hint.setVisibility(View.GONE);
					}
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
			
			@Override
			public void onFinish() {
				super.onFinish();
				Config.dismissProgress();
			}
			
			@Override
			public void onFailure(int statusCode, String content,
					Throwable error) {
				super.onFailure(statusCode, content, error);
			}
		});
	}
	
}
