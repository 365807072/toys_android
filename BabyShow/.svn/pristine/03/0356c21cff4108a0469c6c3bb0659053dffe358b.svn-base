package com.yyqq.commen.service;

import static com.mob.tools.utils.R.getStringRes;

import java.util.HashMap;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.text.TextUtils;
import android.widget.Toast;
import cn.smssdk.EventHandler;
import cn.smssdk.SMSSDK;
import cn.smssdk.utils.SMSLog;

import com.yyqq.commen.utils.Config;
import com.yyqq.framework.callback.CallBackCode;

public class IdentifyMsm {

	private CallBackCode callback;
	private EventHandler handler;
	Activity context;
	int i = 0;

	public IdentifyMsm(Activity context) {
		this.context = context;
		initHander(context);
	}

	private void initHander(final Activity context) {
		handler = new EventHandler() {
			public void afterEvent(int event, int result, Object data) {
				// Log.e("yyyy", "   次数 "+ i++);

				if (event == SMSSDK.EVENT_SUBMIT_VERIFICATION_CODE) {
					/** 提交验证码 */
					afterSubmit(result, data);
				} else {
					if (callback != null)
						callback.execute("false", "false", "false");
				}
				SMSSDK.unregisterAllEventHandler();
			}

			@Override
			public void beforeEvent(int arg0, Object arg1) {
				// TODO Auto-generated method stub
				super.beforeEvent(arg0, arg1);
			}

			@Override
			public void onRegister() {
				// TODO Auto-generated method stub
				super.onRegister();
			}

			@Override
			public void onUnregister() {
				// TODO Auto-generated method stub
				super.onUnregister();
			}
			
		};
	}

	public void sendMsm(String code, String phone, String verificationCode,
			CallBackCode callBackCode) {
		callback = callBackCode;
		SMSSDK.registerEventHandler(handler);
		SMSSDK.submitVerificationCode(code, phone, verificationCode);
		Config.dismissProgress();
	}

	public void registerEventHandler() {
		//SMSSDK.registerEventHandler(handler);
	}

	/**
	 * 提交验证码成功后的执行事件
	 * 
	 * @param result
	 * @param data
	 */
	private void afterSubmit(final int result, final Object data) {
		context.runOnUiThread(new Runnable() {

			@Override
			public void run() {
				if (result == SMSSDK.RESULT_COMPLETE) {
					HashMap<String, Object> res = new HashMap<String, Object>();
					res.put("res", true);
					res.put("page", 2);
					res.put("phone", data);
					if (callback != null)
						callback.execute("true", "true", "true");

				} else {
					((Throwable) data).printStackTrace();
					if (callback != null)
						callback.execute("false", "false", "false");
				}

			}
		});
	}

	/**
	 * 获取验证码成功后,的执行动作
	 * 
	 * @param result
	 * @param data
	 */
	private void afterGet(final int result, final Object data) {
		context.runOnUiThread(new Runnable() {

			@Override
			public void run() {

				if (result == SMSSDK.RESULT_COMPLETE) {
					int resId = getStringRes(context,
							"smssdk_virificaition_code_sent");
					if (resId > 0) {
						Toast.makeText(context, resId, Toast.LENGTH_SHORT)
								.show();
					}
					resId = getStringRes(context, "smssdk_receive_msg");
					callback.execute("true", "true", "true");
				} else {
					((Throwable) data).printStackTrace();
					Throwable throwable = (Throwable) data;
					String message = ((Throwable) data).getMessage();
					if (message == null) {
						Toast.makeText(context, " 验证码不正确", Toast.LENGTH_SHORT)
								.show();
						callback.execute("false", "false", "false");
						return;
					}
					// 根据服务器返回的网络错误，给toast提示
					try {
						JSONObject object = new JSONObject(throwable
								.getMessage());
						String des = object.optString("detail");
						if (!TextUtils.isEmpty(des)) {
							Toast.makeText(context, des, Toast.LENGTH_SHORT)
									.show();
							return;
						}
					} catch (JSONException e) {
						SMSLog.getInstance().w(e);
					}
					// / 如果木有找到资源，默认提示
					int resId = getStringRes(context, "smssdk_network_error");
					if (resId > 0) {
						Toast.makeText(context, resId, Toast.LENGTH_SHORT)
								.show();
					}
				}
			}
		});
	}

	/**
	 * 获取语音验证码成功后,的执行动作
	 * 
	 * @param result
	 * @param data
	 */
	private void afterGetVoice(final int result, final Object data) {
		context.runOnUiThread(new Runnable() {

			@Override
			public void run() {

				if (result == SMSSDK.RESULT_COMPLETE) {
					int resId = getStringRes(context,
							"smssdk_send_sounds_success");
					if (resId > 0) {
						Toast.makeText(context, resId, Toast.LENGTH_SHORT)
								.show();
					}
					// btnSounds.setVisibility(View.GONE);
				} else {
					((Throwable) data).printStackTrace();
					Throwable throwable = (Throwable) data;
					// 根据服务器返回的网络错误，给toast提示
					try {
						JSONObject object = new JSONObject(throwable
								.getMessage());
						String des = object.optString("detail");
						if (!TextUtils.isEmpty(des)) {
							Toast.makeText(context, des, Toast.LENGTH_SHORT)
									.show();
							return;
						}
					} catch (JSONException e) {
						SMSLog.getInstance().w(e);
					}
					// 如果木有找到资源，默认提示
					int resId = getStringRes(context, "smssdk_network_error");
					if (resId > 0) {
						Toast.makeText(context, resId, Toast.LENGTH_SHORT)
								.show();
					}
				}

			}
		});
	}

	public void unregisterEventHandler() {
		//SMSSDK.unregisterEventHandler(handler);
	}
}
