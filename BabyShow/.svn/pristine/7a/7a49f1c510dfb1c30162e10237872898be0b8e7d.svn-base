package com.yyqq.framework.application;

import java.util.LinkedList;
import java.util.List;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.util.DisplayMetrics;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import cn.jpush.android.api.JPushInterface;
import cn.smssdk.SMSSDK;

import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;
import com.nostra13.universalimageloader.core.assist.QueueProcessingType;
import com.yyqq.commen.service.CrashHandlerUtils;
import com.yyqq.commen.utils.DisplayImageOptionsUnits;
import com.yyqq.commen.utils.FaceConversionUtil;

public class MyApplication extends Application {
	public static boolean isFromPush = false;
	private List<Activity> activityList = new LinkedList<Activity>();
	private static MyApplication instance;
	private static float scaledDensity;
	public String tag = "MyApplication";
	private static float density;
	private ImageLoader imageLoader = null;
	public static DisplayMetrics metric;
	public static RelativeLayout.LayoutParams videoViewParams = null;
	public static LinearLayout.LayoutParams imageViewParams = null;
	
	@Override
	public void onCreate() {
		super.onCreate();
		
		// 收集错误
		CrashHandlerUtils crashHandler = CrashHandlerUtils.getInstance();    
		crashHandler.init(getApplicationContext());
		
		/**
		 * 获取屏幕宽高，用于初始化视频播放器宽高（1.8:1）
		 * */
		metric = new DisplayMetrics();
		WindowManager mWindowManager  = (WindowManager) this.getSystemService(Context.WINDOW_SERVICE);
		mWindowManager.getDefaultDisplay().getMetrics(metric);
		
		instance = this;
		JPushInterface.setDebugMode(true);
		JPushInterface.init(this);
		SMSSDK.initSDK(this, "e429567eaf24", "9c17c627949764ff03ac1bf2b378891f");
		imageLoader = ImageLoader.getInstance();
		initImageLoader(getApplicationContext());
		// 先加载文件 要不刚进来的时候表情都不能用都是

		FaceConversionUtil.getInstace().getFileText(MyApplication.this);
		density = getResources().getDisplayMetrics().density;
		scaledDensity = getResources().getDisplayMetrics().scaledDensity;
		// sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED,
		// Uri.parse("file://"
		// + Environment.getExternalStorageDirectory())));
	}

	public void initImageLoader(Context context) {
		ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(
				context).threadPriority(Thread.NORM_PRIORITY - 2)
				.denyCacheImageMultipleSizesInMemory()
				.discCacheFileNameGenerator(new Md5FileNameGenerator())
				.tasksProcessingOrder(QueueProcessingType.LIFO).enableLogging()
				.build();
		ImageLoader.getInstance().init(config);
	}

	// 单例模式中获取唯一的MyApplication实例
	public static MyApplication getInstance() {
		if (null == instance) {
			instance = new MyApplication();
		}
		return instance;
	}

	public static float getDensity() {
		return density;
	}

	public static float getScaledDensity() {
		return scaledDensity;
	}

	// 添加Activity到容器中
	public void addActivity(Activity activity) {
		activityList.add(activity);
	}

	public void stopAll() {
		for (Activity activity : activityList) {
			activity.finish();
		}
	}

	// 遍历所有Activity并finish
	public void exit() {
		for (Activity activity : activityList) {
			activity.finish();
		}
		System.exit(0);
	}

	/**
	 * @param imgurl
	 * @param imageView
	 * @param defaultPicId
	 */
	public void display(String imgurl, ImageView imageView, int defaultPicId) {
		imageLoader.displayImage(imgurl, imageView, DisplayImageOptionsUnits
				.getIns().displayImageOptions(defaultPicId));

	}
	
	public void displayNoCache(String imgurl, ImageView imageView, int defaultPicId) {
		imageLoader.displayImage(imgurl, imageView, DisplayImageOptionsUnits
				.getIns().displayOptions(defaultPicId));

	}
	
	public void display(String imgurl, ImageView imageView, int defaultPicId,
			ImageLoadingListener listener) {
		imageLoader.displayImage(imgurl, imageView, DisplayImageOptionsUnits
				.getIns().displayImageOptions(defaultPicId), listener);

	}

	public void imageBackground(String imgurl, ImageView imageView, int defaultPicId) {
		imageLoader.displayImage(imgurl, imageView, DisplayImageOptionsUnits.getIns().displayImageOptions(defaultPicId));

	}

	/**
	 * 获取登录状态
	 * */
	public static String getVisitor(){
		SharedPreferences sp = instance.getSharedPreferences("login_type", 0);
		return sp.getString("index", "1");  // “1” - 表示未登录
	}
	
	/**
	 * 修改登录状态
	 * */
	public static void setVisitor(String index){
		SharedPreferences sp = instance.getSharedPreferences("login_type", 0);
		Editor ed = sp.edit();
		ed.putString("index", index);
		ed.commit();
	};
	
	/**
	 * 获取视频播放器窗口比例 
	 * 1. 父view的Id(需要将videoView置中于父view的情况下，传入父view的id,不需要置中则传-1)
	 * */
	public static RelativeLayout.LayoutParams getVideoPlayerParams(int parentViewId){
		videoViewParams = new RelativeLayout.LayoutParams(metric.widthPixels, (int) Math.floor((metric.widthPixels/1.8)));
		if(-1 != parentViewId){
			videoViewParams.addRule(RelativeLayout.CENTER_HORIZONTAL, parentViewId);
		}
		return videoViewParams;
	}
	
	/**
	 * 视频全屏播放
	 * 1. 父view的Id(需要将videoView置中于父view的情况下，传入父view的id,不需要置中则传-1)
	 * 2. 是否是竖屏拍摄的视屏
	 * */
	public static RelativeLayout.LayoutParams getVideoFullParams(int parentViewId, boolean isVertical){
		
		if(isVertical){
			videoViewParams = new RelativeLayout.LayoutParams((int) Math.floor((metric.widthPixels/1.8)), metric.widthPixels);
		}else{
			videoViewParams = new RelativeLayout.LayoutParams(metric.heightPixels, metric.widthPixels);
		}
		if(-1 != parentViewId){
			videoViewParams.addRule(RelativeLayout.CENTER_HORIZONTAL, parentViewId);
		}
		return videoViewParams;
	}
	
	/**
	 * 获取视频播放器窗口比例 
	 * 1. 父view的Id(需要将videoView置中于父view的情况下，传入父view的id,不需要置中则传-1)
	 * 2. 比例值
	 * */
	public static RelativeLayout.LayoutParams getVideoPlayerParams(int parentViewId, int Proportion){
		videoViewParams = new RelativeLayout.LayoutParams(metric.widthPixels, (int) Math.floor((metric.widthPixels/Proportion)));
		if(-1 != parentViewId){
			videoViewParams.addRule(RelativeLayout.CENTER_HORIZONTAL, parentViewId);
		}
		return videoViewParams;
	}
	
	/**
	 * 获取首页列表单图比例 
	 * 1. 父view的Id(需要将videoView置中于父view的情况下，传入父view的id,不需要置中则传-1)
	 * */
	public static LinearLayout.LayoutParams getImageViewParams(){
		imageViewParams = new LinearLayout.LayoutParams(metric.widthPixels, (int) Math.floor((metric.widthPixels/3)));
		return imageViewParams;
	}
	
	/**
	 * 获取首页列表单图比例 
	 * 1. 父view的Id(需要将videoView置中于父view的情况下，传入父view的id,不需要置中则传-1)
	 * 2. 倍数
	 * */
	public static LinearLayout.LayoutParams getImageViewParams(int Multiple){
		imageViewParams = new LinearLayout.LayoutParams(metric.widthPixels, (int) Math.floor((metric.widthPixels/Multiple)));
		return imageViewParams;
	}
	
	/**
	 * 获取首页列表三图并列图片宽高 
	 * 1. 父view的Id(需要将videoView置中于父view的情况下，传入父view的id,不需要置中则传-1)
	 * */
	public static LinearLayout.LayoutParams getMainImageViewParams(){
		imageViewParams = new LinearLayout.LayoutParams(dip2px((px2dip(metric.widthPixels) - 20) / 3), dip2px((px2dip(metric.widthPixels) - 20) / 3 - 10));
		return imageViewParams;
	}
	
	public static int dip2px(float dipValue){ 
		final float scale = instance.getResources().getDisplayMetrics().density; 
		return (int)(dipValue * scale + 0.5f); 
	} 
	
	public static int px2dip(float pxValue){ 
		final float scale = instance.getResources().getDisplayMetrics().density; 
		return (int)(pxValue / scale + 0.5f); 
	} 
	
}
