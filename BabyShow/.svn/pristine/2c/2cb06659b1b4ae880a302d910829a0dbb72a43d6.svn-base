package com.yyqq.commen.adapter;

import java.util.ArrayList;

import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.Context;
import android.content.DialogInterface;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import android.widget.Toast;

import com.ab.http.AbHttpUtil;
import com.ab.http.AbRequestParams;
import com.ab.http.AbStringHttpResponseListener;
import com.yyqq.babyshow.R;
import com.yyqq.commen.utils.Config;
import com.yyqq.framework.application.ServerMutualConfig;

public class GroupManagerCategoryAdapter extends BaseAdapter {

	private String group_id = "";
	private Activity context = null;
	private LayoutInflater inflater = null;
	private AbHttpUtil ab;
	private ArrayList<String> cateGoryList;
	private ArrayList<String> cateGoIdryList;

	public GroupManagerCategoryAdapter(String group_id, Activity context, LayoutInflater inflater, ArrayList<String> cateGoryList, ArrayList<String> cateGoIdryList, AbHttpUtil ab) {
		super();
		this.group_id = group_id;
		this.context = context;
		this.inflater = inflater;
		this.cateGoryList = cateGoryList;
		this.cateGoIdryList = cateGoIdryList;
		this.ab = ab;
	}

	@Override
	public int getCount() {
		return cateGoryList.size();
	}

	@Override
	public Object getItem(int position) {
		return cateGoryList.get(position);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	@SuppressLint("NewApi")
	@Override
	public View getView(final int position, View convertView, ViewGroup parent) {
		convertView = inflater.inflate(R.layout.item_group_manager_category, null);

		TextView item_group_catagory_number = (TextView) convertView.findViewById(R.id.item_group_category_number);
		item_group_catagory_number.setText((position + 1) +"");
		
		TextView item_group_catagory_title = (TextView) convertView.findViewById(R.id.item_group_category_title);
		item_group_catagory_title.setText(cateGoryList.get(position));
		
		ImageView item_group_category_edit = (ImageView) convertView.findViewById(R.id.item_group_category_edit);
		item_group_category_edit.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				showAddView(position);
			}
		});
		
		ImageView item_group_category_delete = (ImageView) convertView.findViewById(R.id.item_group_category_delete);
		item_group_category_delete.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				AlertDialog.Builder builder = new Builder(context);
				builder.setTitle("确认删除分类 \"" + cateGoryList.get(position) + "\" 吗？");
				builder.setNegativeButton("确定", new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface arg0, int arg1) {
						arg0.dismiss();
						deleteCategory(position);
					}
				});
				
				builder.setNeutralButton("取消", new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.dismiss();
					}
				});
				
				final AlertDialog dialog = builder.create();
				dialog.show();
			}
		});
		
		return convertView;
	}
	

	private void showAddView(final int position){
		AlertDialog.Builder builder = new Builder(context);
		builder.setTitle("请输入新分类名称");
		final EditText edit_name = new EditText(context);
		edit_name.setSingleLine(true);
		edit_name.setMaxEms(10);
		edit_name.setText(cateGoryList.get(position));
		edit_name.setSelection(cateGoryList.get(position).length());
		builder.setView(edit_name);
		builder.setNegativeButton("确定", new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface arg0, int arg1) {
				if(edit_name.getText().toString().trim().length() > 10){
					Toast.makeText(context, "分类名称过长，最多10个字",Toast.LENGTH_SHORT).show();
					return;
				}
				addCategory(position, edit_name.getText().toString().trim());
				arg0.dismiss();
				((InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(edit_name.getWindowToken(), 0);
			}
		});
		
		builder.setNeutralButton("取消",
				new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				dialog.dismiss();
				((InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(edit_name.getWindowToken(), 0);
			}
		});
		
		final AlertDialog dialog = builder.create();
		dialog.show();
		
		edit_name.setOnEditorActionListener(new OnEditorActionListener(){

			@Override
			public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
				addCategory(position, edit_name.getText().toString().trim());
				dialog.dismiss();
				((InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(edit_name.getWindowToken(), 0);
				return false;
			}
		});
		
		edit_name.setOnFocusChangeListener(new OnFocusChangeListener() {
			
			@Override
			public void onFocusChange(View v, boolean hasFocus) {
				if (hasFocus) {
		            dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
		       }
			}
		});
	}
	
	/**
	 * 修改分类名称
	 * */
	private void addCategory(final int position, final String categoryStr){
		Config.showProgressDialog(context, false, null);
		AbRequestParams params = new AbRequestParams();
		params.put("login_user_id", Config.getUser(context).uid);
		params.put("group_class_id", cateGoIdryList.get(position));
		params.put("group_id", group_id);
		params.put("title", categoryStr);
		ab.post(ServerMutualConfig.editGroupCategory, params, new AbStringHttpResponseListener() {
			
					@Override
					public void onSuccess(int statusCode, String content) {
						super.onSuccess(statusCode, content);
						Config.dismissProgress();
						try {
							JSONObject json = new JSONObject(content);
							if (json.getBoolean("success")) {
								cateGoryList.remove(position);
								cateGoryList.add(position, categoryStr);
								notifyDataSetChanged();
								Toast.makeText(context,json.getString("reMsg"),Toast.LENGTH_SHORT).show();
							}
						} catch (JSONException e) {
							e.printStackTrace();
						}
					}

					@Override
					public void onFinish() {
						super.onFinish();
					}

					@Override
					public void onFailure(int statusCode,
							String content, Throwable error) {
						super.onFailure(statusCode, content, error);
					}
				});
	}
	
	
	/**
	 * 删除分类
	 * */
	private void deleteCategory(final int position){
		Config.showProgressDialog(context, false, null);
		AbRequestParams params = new AbRequestParams();
		params.put("login_user_id", Config.getUser(context).uid);
		params.put("group_class_id", cateGoIdryList.get(position) + "");
		ab.get(ServerMutualConfig.cancelGroupCategory + "&" + params.toString(), new AbStringHttpResponseListener() {
			
			@Override
			public void onSuccess(int statusCode, String content) {
				super.onSuccess(statusCode, content);
				Config.dismissProgress();
				try {
					JSONObject json = new JSONObject(content);
					if (json.getBoolean("success")) {
						cateGoIdryList.remove(position);
						cateGoryList.remove(position);
						Toast.makeText(context,json.getString("reMsg"),Toast.LENGTH_SHORT).show();
						notifyDataSetChanged();
					}
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}

			@Override
			public void onFinish() {
				super.onFinish();
			}

			@Override
			public void onFailure(int statusCode,
					String content, Throwable error) {
				super.onFailure(statusCode, content, error);
			}
		});
	}

}
