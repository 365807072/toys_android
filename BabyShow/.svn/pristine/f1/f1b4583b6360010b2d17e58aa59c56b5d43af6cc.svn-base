package com.yyqq.code.main;

import java.io.File;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;

import org.json.JSONException;
import org.json.JSONObject;

import com.ab.http.AbHttpUtil;
import com.ab.http.AbRequestParams;
import com.ab.http.AbStringHttpResponseListener;
import com.umeng.analytics.MobclickAgent;
import com.yyqq.babyshow.R;
import com.yyqq.code.business.BusinessDetailActivity;
import com.yyqq.code.login.WebLoginActivity;
import com.yyqq.code.photo.ChangePhotoSize;
import com.yyqq.code.toyslease.ToysLeaseMainTabActivity;
import com.yyqq.code.video.VideoDetialActivity;
import com.yyqq.commen.adapter.MainImageListApapter;
import com.yyqq.commen.adapter.MainInfoListAdapter;
import com.yyqq.commen.model.HeadListItem;
import com.yyqq.commen.model.MainListItemBean;
import com.yyqq.commen.model.PostBarTypeItem;
import com.yyqq.commen.utils.APKUpdataUtils;
import com.yyqq.commen.utils.Config;
import com.yyqq.commen.utils.GPSLocationUtils;
import com.yyqq.commen.utils.GroupRelevantUtils;
import com.yyqq.commen.utils.UGallery;
import com.yyqq.commen.utils.WebViewActivity;
import com.yyqq.commen.view.PullDownView;
import com.yyqq.commen.view.PullDownView.OnPullDownListener;
import com.yyqq.framework.activity.BaseActivity;
import com.yyqq.framework.application.Constants;
import com.yyqq.framework.application.MyApplication;
import com.yyqq.framework.application.ServerMutualConfig;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.DisplayMetrics;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.animation.TranslateAnimation;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.Toast;
import cn.sharesdk.framework.ShareSDK;


/**
 * 客户端首页
 * 
 * */
@SuppressLint("NewApi")
public class GoodLife extends BaseActivity implements OnPullDownListener {

	private ListView listview;
	private UGallery mGallery;
	private ImageView[] myPoints;
	private LinearLayout mGroup;
	private ImageView mPointImg;
	private ImageView search;
	private RelativeLayout search_root;
	private RelativeLayout title;
	private PullDownView mPullDownView;
	private RelativeLayout mRelativeLayout;
	private RelativeLayout search_btn;
	private ImageView find;
	private ImageView search_hint;
	private ImageView main_to_add_new;

	private AbHttpUtil ab;
	private Activity context;
	private int dataIndex = 0;
	private MyApplication app;
	private LayoutInflater inflater;
	private MainInfoListAdapter hotAdapter;
	private MainImageListApapter mImageAdapter;
	private ArrayList<MainListItemBean> hotData = new ArrayList<MainListItemBean>();
	private ArrayList<HeadListItem> headData = new ArrayList<HeadListItem>();

	private int windowWidth;
	public int ADD_POINT = -1;
	public static String SearchWord = "";
	public static int sss; // s=0,表示搜索布局在
	private int downIndex = 200;
	private Timer videoTimer = new Timer();
	private int showIndex = 0;
	private boolean isFirse02 = true; // 是否首次请求数据
	private SharedPreferences sp_main_list;
	private Editor ed_main_list;

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		return Config.onKeyDown(keyCode, event, this);
	}

	public void onCreate(Bundle b) {
		super.onCreate(b);
		context = this;
		inflater = LayoutInflater.from(context);
		Config.setActivityState(this);
		setContentView(R.layout.goodlife);
	}

	@Override
	protected void initView() {
		
		DisplayMetrics DM = new DisplayMetrics();
		context.getWindowManager().getDefaultDisplay().getMetrics(DM);
		windowWidth = DM.widthPixels;
		initHeadbar();
		
		main_to_add_new = (ImageView) findViewById(R.id.main_to_add_new);
		search_root = (RelativeLayout) findViewById(R.id.search_root);
		title = (RelativeLayout) findViewById(R.id.title);
		find = (ImageView) findViewById(R.id.find);
		search = (ImageView) findViewById(R.id.search);
		mPullDownView = (PullDownView) findViewById(R.id.list);
		search_hint = (ImageView) findViewById(R.id.search_hint);
		mPullDownView.setOnPullDownListener(this);
		mPullDownView.setShowHeader();// 显示并且可以使用头部刷新
		search_btn = (RelativeLayout) findViewById(R.id.search_btn);
	}

	@SuppressLint("NewApi")
	@Override
	protected void initData() {

		// 清除下载的安装包
		File file = new File("/sdcard/" + "宝贝半径.apk");
		if(null != file){
			file.delete();
		}
		
		// 检查是否需要更新版本
		APKUpdataUtils.checkUpdata(context);
		
		// 初始化请求、分享
		ShareSDK.initSDK(context);
		app = (MyApplication) context.getApplication();
		ab = AbHttpUtil.getInstance(context);
		
		// 初始化主列表
		listview = mPullDownView.getListView();
		listview.setDivider(null);
		if (hotAdapter == null) {
			hotAdapter = new MainInfoListAdapter(GoodLife.this, hotData);
		}
		listview.setAdapter(hotAdapter);
		mPullDownView.enableAutoFetchMore(true, 1);// 设置可以自动获取更多 滑到最后一个自动获取
		mPullDownView.setShowHeaderLayout(mRelativeLayout);
		
		// 初始化缓存
		sp_main_list = getSharedPreferences("goodlist_main_hot", Context.MODE_PRIVATE);
		ed_main_list = sp_main_list.edit();
		
		// 获取缓存
		if(!sp_main_list.getString("goodlist_main_hot", "").isEmpty()){
			try {
				JSONObject json = new JSONObject(sp_main_list.getString("goodlist_main_hot", ""));
				if(json.getBoolean("success")){
					hotData.clear();
					dataIndex = json.getJSONArray("data").length() - 1;
					for (int i = 0; i < json.getJSONArray("data").length(); i++) {
						MainListItemBean item = new MainListItemBean();
						hotData.add(item.fromJson(json.getJSONArray("data").getJSONObject(i)));
					}
					hotAdapter.notifyDataSetChanged();
				}
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		
		// 刷新数据
		onRefresh();
		
		getWechatApiKey(ab);
	}

	@Override
	protected void setListener() {
		
		main_to_add_new.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if ("1".equals(MyApplication.getVisitor())) {
					Intent intent = new Intent();
					intent.setClass(context, WebLoginActivity.class);
					startActivity(intent);
				} else {
					Intent in = new Intent(GoodLife.this, AddNewPostActivity.class);
					startActivity(in);
				}
			}
		});

		search_root.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				GoodLife.this.startActivity(new Intent(GoodLife.this,
						SearchResultActivity.class));
			}
		});

		listview.setOnScrollListener(new OnScrollListener() {

			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {

			}

			@Override
			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {
				if (getScrollY() >= 10 && getScrollY() < 120) {
					search_btn.setVisibility(View.GONE);
					float scale = (float) getScrollY() / downIndex;
					float alpha = (255 * scale);
					search_root.setBackgroundColor(Color.argb((int) alpha, 255, 201, 201));
					search_hint.setVisibility(View.GONE);
					search.setVisibility(View.GONE);
					search_root.setVisibility(View.VISIBLE);
				} else if (getScrollY() >= 120 && getScrollY() < downIndex) {
					search_btn.setVisibility(View.GONE);
					float scale = (float) getScrollY() / downIndex;
					float alpha = (255 * scale);
					search_root.setBackgroundColor(Color.argb((int) alpha, 255,
							166, 166));
					search_hint.setVisibility(View.GONE);
					search.setVisibility(View.GONE);
					search_root.setVisibility(View.VISIBLE);
				} else if (getScrollY() > downIndex && !search_hint.isShown()) {
					search_btn.setVisibility(View.GONE);
					search_root.setVisibility(View.VISIBLE);
					float scale = (float) getScrollY() / downIndex;
					float alpha = (255 * scale);
					search_root.setBackgroundColor(Color.argb((int) 255, 255,
							103, 103));
					search_root.setVisibility(View.VISIBLE);
					TranslateAnimation animation = new TranslateAnimation(800, 0, 0, 0);
					animation.setDuration(300);
					search_hint.setVisibility(View.VISIBLE);
					search.setVisibility(View.VISIBLE);
					search_hint.startAnimation(animation);
					search.startAnimation(animation);
				} else if (downIndex > getScrollY() && search_root.isShown()) {
					search_btn.setVisibility(View.VISIBLE);
					TranslateAnimation animation = new TranslateAnimation(0,800, 0, 0);
					animation.setDuration(300);
					search_root.startAnimation(animation);
					search_root.setVisibility(View.GONE);
				}
			}
		});

		// 搜索
		find.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				sss = 0;
				search_root.setVisibility(View.VISIBLE);
				title.setVisibility(View.GONE);
			}
		});

		// 顶部搜索
		search_btn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				GoodLife.this.startActivity(new Intent(GoodLife.this, SearchResultActivity.class));
			}
		});
		
		// 轮播图定时更换
		videoTimer.schedule(imageTask, 1, 1500);

		// 轮播图点击事件
		mGallery.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1,
					int position, long arg3) {
				imagesClick(position);
			}
		});

		mGallery.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> parent, View view,
					int position, long id) {
				showIndex = position;
				if (myPoints != null && myPoints.length > 0) {
					for (int i = 0; i < myPoints.length; i++) {
						if (position == i) {
							myPoints[i].setBackgroundResource(R.drawable.dian_hong);
						} else {
							myPoints[i].setBackgroundResource(R.drawable.dian_hui);
						}
					}
				}
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {

			}
		});

	}

	TimerTask imageTask = new TimerTask() {

		@Override
		public void run() {
			Message message = new Message();
			message.what = 0;
			handler.sendMessage(message);
		}
	};

	/**
	 * 初始化轮播图
	 * */
	private void initHeadbar() {
		mRelativeLayout = (RelativeLayout) inflater.inflate(R.layout.square_head, null);
		mGallery = (UGallery) mRelativeLayout.findViewById(R.id.gallery);
		mGroup = (LinearLayout) mRelativeLayout.findViewById(R.id.viewGroup);
		mGroup.setGravity(Gravity.CENTER);
		mImageAdapter = new MainImageListApapter(GoodLife.this, headData, windowWidth);
		mGallery.setAdapter(mImageAdapter);
	}

	/**
	 * 添加小圆点图片
	 */
	private void addPoint() {
		myPoints = new ImageView[headData.size()];
		for (int i = 0; i < headData.size(); i++) {
			mPointImg = new ImageView(context);
			LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
					LinearLayout.LayoutParams.WRAP_CONTENT,
					LinearLayout.LayoutParams.WRAP_CONTENT);
			params.setMargins(7, 0, 7, 0);
			mPointImg.setLayoutParams(params);
			myPoints[i] = mPointImg;
			if (i == 0) {
				myPoints[i].setBackgroundResource(R.drawable.dian_hong);
			} else {
				myPoints[i].setBackgroundResource(R.drawable.dian_hui);
			}
			mGroup.addView(myPoints[i]);
		}
	}

	/**
	 * 获取轮播图地址
	 * */
	public void getHeadList() {

		SharedPreferences sp_image_list = context.getSharedPreferences("imageList", 0);
		if (!Config.isConn(context)) { // 没有网络获取缓存
			// 保存最新图片地址
			updateImageView(sp_image_list.getString("imageurl", ""));
			return;
		}

		updateImageView(sp_image_list.getString("imageurl", ""));
		AbRequestParams params = new AbRequestParams();
		params.put("login_user_id", Config.getUser(context).uid);
		params.put("versionName", getVersionName(context));
		params.put("mapsign", GPSLocationUtils.getLatitude(context) + "," + GPSLocationUtils.getLongitude(context));
		ab.get(ServerMutualConfig.HeadListV7 + "&" + params.toString(),
				new AbStringHttpResponseListener() {
					@Override
					public void onSuccess(int statusCode, String content) {
						super.onSuccess(statusCode, content);
						updateImageView(content);
					}

					@Override
					public void onFinish() {
						super.onFinish();
						mPullDownView.RefreshComplete();// 这个事线程安全的 可看源代码
						mPullDownView.notifyDidMore();
					}

					@Override
					public void onFailure(int statusCode, String content,
							Throwable error) {
						super.onFailure(statusCode, content, error);
					}
				});
	}

	/**
	 * 开一个线程执行耗时操作
	 */
	private Handler handler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			switch (msg.what) {
			case 2:
				hotAdapter.notifyDataSetChanged();
				break;
			case -1:
				mGroup.removeAllViews();
				addPoint();
				break;
			case 0:
				if (headData.size() == showIndex) {
					showIndex = 0;
				}
				mGallery.setSelection(showIndex);
				showIndex += 1;
				break;
			}
		}

	};

	@Override
	public void onRefresh() {
		isFirse02 = true;
		
		// 初始化轮播图
		getHeadList();
		
		// 初始化“热门”数据
		initHotData("");
	}

	@Override
	public void onMore() {
		if(Config.isConn(context)){
			if (hotData.size() == 0) {
				mPullDownView.notifyDidMore();
				mPullDownView.RefreshComplete();
				return;
			}
			initHotData("");
		}
	}

	
	/**
	 * 获取微信支付Key
	 * 
	 * */
	@SuppressLint("NewApi")
	public static void getWechatApiKey(AbHttpUtil ab) {

		if (null == ab) {
			return;
		}

		if (!Constants.API_KEY.isEmpty()) {
			return;
		}

		ab.post(ServerMutualConfig.GET_WECHAT_KEY,
				new AbStringHttpResponseListener() {

					@Override
					public void onSuccess(int statusCode, String content) {
						super.onSuccess(statusCode, content);
						try {
							JSONObject jsonObj = new JSONObject(content)
									.getJSONObject("data");
							if (jsonObj.has("wx_key")) {
								if (!jsonObj.getString("wx_key").isEmpty()) {
									Constants.API_KEY = jsonObj
											.getString("wx_key");
								}
							}
						} catch (JSONException e) {
							e.printStackTrace();
						}
					}

					@Override
					public void onFinish() {
						super.onFinish();
					}

					@Override
					public void onFailure(int statusCode, String content,
							Throwable error) {
						super.onFailure(statusCode, content, error);
					}
				});
	}

	/**
	 * 缓存并更新图片数组
	 * */
	@SuppressLint("NewApi")
	private void updateImageView(String content) {
		try {
			JSONObject json_check = new JSONObject(content);
			if (!content.isEmpty() && json_check.getBoolean("reCode")) {
				headData.clear();
				mGroup.removeAllViews();
				try {
					// 保存最新图片地址
					SharedPreferences sp_image_list = context.getSharedPreferences("imageList", 0);
					Editor ed = sp_image_list.edit();
					ed.putString("imageurl", content);
					ed.commit();
					
					JSONObject json = new JSONObject(content);
					for (int i = 0; i < json.getJSONArray("data").length(); i++) {
						HeadListItem item = new HeadListItem();
						item.fromJson(json.getJSONArray("data").getJSONObject(i), content);
						headData.add(item);
					}
					mImageAdapter.notifyDataSetChanged();
					handler.sendEmptyMessage(ADD_POINT);
				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
		} catch (JSONException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}

	
	/**
	 * 轮播图点击跳转判断
	 * */
	private void imagesClick(int position) {
		if("2".equals(headData.get(position).type)){
			GroupRelevantUtils.CheckIntent(context, headData.get(position).group_id);
		}else if("0".equals(headData.get(position).is_click)){ // 玩具世界
			if ("9".equals(headData.get(position).type)){
				Intent intent02 = new Intent();
				intent02.setClass(context, ToysLeaseMainTabActivity.class);
				startActivity(intent02);
			}
		}else{
			Intent intent = new Intent();
			if ("1".equals(headData.get(position).is_click)) {
				if ("1".equals(headData.get(position).type)) { // 专题
					intent.setClass(context, SpecialDetailList.class);
					intent.putExtra("cate_id", headData.get(position).cate_id);
					intent.putExtra("cate_name", headData.get(position).cate_name);
				} else if ("3".equals(headData.get(position).type)) { // 帖子
					intent.setClass(context, MainItemDetialActivity.class);
					intent.putExtra("img_id", headData.get(position).img_id);
				} else if ("4".equals(headData.get(position).type)) { // 相册播放
					intent.setClass(context, ChangePhotoSize.class);
					ArrayList<String> imgBig = new ArrayList<String>();
					ArrayList<String> imaHed = new ArrayList<String>();
					ArrayList<String> imaWid = new ArrayList<String>();
					for (int i = 0; i < headData.get(position).imgList.size(); i++) {
						imgBig.add(headData.get(position).imgList.get(i).img_thumb);
						imaHed.add(headData.get(position).imgList.get(i).img_thumb_height);
						imaWid.add(headData.get(position).imgList.get(i).img_thumb_width);
					}
					intent.putStringArrayListExtra("imgList", imgBig);
					intent.putStringArrayListExtra("imaWid", imaWid);
					intent.putStringArrayListExtra("imaHed", imaHed);
					intent.putExtra("aotuplay", true);
				} else if ("5".equals(headData.get(position).type)) { // 值得买
					intent.setClass(context, WebViewActivity.class);
					intent.putExtra("webviewurl",
							headData.get(position).business_url);
				} else if ("6".equals(headData.get(position).type)) { // 商家
					intent.setClass(context, BusinessDetailActivity.class);
					intent.putExtra("business_id",
							headData.get(position).business_id);
					intent.putExtra("business_name",
							headData.get(position).business_name);
				} else if ("8".equals(headData.get(position).type)) { // 商家
					PostBarTypeItem bean = new PostBarTypeItem();
					bean.setImg_id(headData.get(position).img_id);
					bean.setVideo_url(headData.get(position).video_url);
					bean.setImg(headData.get(position).imgList.get(0).img_thumb);
					bean.setImg_thumb_width(headData.get(position).imgList.get(0).img_thumb_width);
					bean.setImg_thumb_height(headData.get(position).imgList.get(0).img_thumb_height);
					
					intent.setClass(context, VideoDetialActivity.class);
					Bundle bun = new Bundle();
					bun.putSerializable(VideoDetialActivity.VIIDEO_INFO, bean);
					intent.putExtras(bun);
				} else {// 商家列表
					intent.setClass(context, MainTab.class);
					intent.putExtra("tabid", 1);
					intent.putExtra("lat", GPSLocationUtils.getLatitude(context));
					intent.putExtra("lon", GPSLocationUtils.getLongitude(context));
				}
				startActivity(intent);
			}
		}
	}

	/**
	 * 获取滚动距离
	 * */
	public int getScrollY() {
		View c = listview.getChildAt(0);
		if (c == null) {
			return 0;
		}
		int firstVisiblePosition = listview.getFirstVisiblePosition();
		int top = c.getTop();
		int headerHeight = 0;

		if (firstVisiblePosition >= 1) {
			headerHeight = listview.getHeight();
		}

		return -top + firstVisiblePosition * c.getHeight() + headerHeight;
	}

	@Override
	public void onResume() {
		super.onResume();
		MobclickAgent.onResume(this);
		// 修改底部栏文字颜色
		MainTab.iconText.get(0).setTextColor(Color.parseColor("#fe6363"));
		MainTab.iconText.get(1).setTextColor(Color.parseColor("#000000"));
		MainTab.iconText.get(3).setTextColor(Color.parseColor("#000000"));
		MainTab.iconText.get(4).setTextColor(Color.parseColor("#000000"));
	}

	@Override
	public void onPause() {
		super.onPause();
		MobclickAgent.onPause(this);
	}

	/**
	 * 初始化“热门”数据 1.请求地址
	 * */
	private void initHotData(String url) {

		// 判断网络是否正常
		if(!Config.isConn(context)){
			return;
		}

		final AbRequestParams paramsHot = new AbRequestParams();
		paramsHot.put("login_user_id", Config.getUser(context).uid);
		if (!isFirse02 && hotData.size() != 0) {
			paramsHot.put("post_create_time", hotData.get(hotData.size() - 1).getImgList().get(hotData.get(hotData.size() - 1).getImgList().size() - 1).getPost_create_time());
		}
		ab.get(ServerMutualConfig.GET_HOT_LIST + "&" + paramsHot.toString(), new AbStringHttpResponseListener() {
			
					@Override
					public void onSuccess(int statusCode, String content) {
						super.onSuccess(statusCode, content);
						if (isFirse02) {
							hotData.clear();
						}
						if (!content.isEmpty()) {
							try {
								JSONObject json = new JSONObject(content);
								
								// 更新缓存
								if(json.getBoolean("success") && isFirse02){
									ed_main_list.putString("goodlist_main_hot", content);
									ed_main_list.commit();
								}
								
								for (int i = 0; i < json.getJSONArray("data").length(); i++) {
									MainListItemBean item = new MainListItemBean();
									hotData.add(item.fromJson(json.getJSONArray("data").getJSONObject(i)));
								}
								hotAdapter.notifyDataSetChanged();
							} catch (JSONException e) {
								e.printStackTrace();
							}
						} else {
							Toast.makeText(context, "没有更多了", 3).show();
						}

						isFirse02 = false;
					}

					@Override
					public void onFinish() {
						super.onFinish();
						mPullDownView.RefreshComplete();// 这个事线程安全的 可看源代码
						mPullDownView.notifyDidMore();
					}

					@Override
					public void onFailure(int statusCode, String content,
							Throwable error) {
						super.onFailure(statusCode, content, error);
					}
				});
	}
	
	/**
	 * 获取当前版名
	 * */
	private String getVersionName(Context mContext) {  
		String versionName = "0";
        try {  
        	PackageManager manager = mContext.getPackageManager();  
            PackageInfo info = manager.getPackageInfo(mContext.getPackageName(), 0);  
            versionName = info.versionName;  
            return versionName;  
        } catch (Exception e) {  
            e.printStackTrace();  
            return "0";  
        }  
    }
}
